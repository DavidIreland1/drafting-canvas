(function webpackUniversalModuleDefinition(root, factory) {
	if (typeof exports === 'object' && typeof module === 'object') module.exports = factory();
	else if (typeof define === 'function' && define.amd) define([], factory);
	else if (typeof exports === 'object') exports['reducer'] = factory();
	else root['reducer'] = factory();
})(global, function () {
	return /******/ (() => {
		// webpackBootstrap
		/******/ var __webpack_modules__ = {
			/***/ 381: /***/ (__unused_webpack_module, exports) => {
				const initial_state = {
					cursors: [],
					views: [],
					elements: [],
					page: {
						color: [1, 0, 0.9, 1],
						format: 'hex4',
						visible: true,
					},
				};

				exports.Z = initial_state;

				/***/
			},

			/******/
		};
		/************************************************************************/
		/******/ // The module cache
		/******/ var __webpack_module_cache__ = {};
		/******/
		/******/ // The require function
		/******/ function __webpack_require__(moduleId) {
			/******/ // Check if module is in cache
			/******/ var cachedModule = __webpack_module_cache__[moduleId];
			/******/ if (cachedModule !== undefined) {
				/******/ return cachedModule.exports;
				/******/
			}
			/******/ // Create a new module (and put it into the cache)
			/******/ var module = (__webpack_module_cache__[moduleId] = {
				/******/ // no module.id needed
				/******/ // no module.loaded needed
				/******/ exports: {},
				/******/
			});
			/******/
			/******/ // Execute the module function
			/******/ __webpack_modules__[moduleId](module, module.exports, __webpack_require__);
			/******/
			/******/ // Return the exports of the module
			/******/ return module.exports;
			/******/
		}
		/******/
		/************************************************************************/
		/******/ /* webpack/runtime/define property getters */
		/******/ (() => {
			/******/ // define getter functions for harmony exports
			/******/ __webpack_require__.d = (exports, definition) => {
				/******/ for (var key in definition) {
					/******/ if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
						/******/ Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
						/******/
					}
					/******/
				}
				/******/
			};
			/******/
		})();
		/******/
		/******/ /* webpack/runtime/hasOwnProperty shorthand */
		/******/ (() => {
			/******/ __webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);
			/******/
		})();
		/******/
		/******/ /* webpack/runtime/make namespace object */
		/******/ (() => {
			/******/ // define __esModule on exports
			/******/ __webpack_require__.r = (exports) => {
				/******/ if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {
					/******/ Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
					/******/
				}
				/******/ Object.defineProperty(exports, '__esModule', { value: true });
				/******/
			};
			/******/
		})();
		/******/
		/************************************************************************/
		var __webpack_exports__ = {};
		// This entry need to be wrapped in an IIFE because it need to be in strict mode.
		(() => {
			'use strict';
			// ESM COMPAT FLAG
			__webpack_require__.r(__webpack_exports__);

			// EXPORTS
			__webpack_require__.d(__webpack_exports__, {
				default: () => /* binding */ reducers_reducers,
			}); // CONCATENATED MODULE: ./reducers/creation.ts

			var __read =
				(undefined && undefined.__read) ||
				function (o, n) {
					var m = typeof Symbol === 'function' && o[Symbol.iterator];
					if (!m) return o;
					var i = m.call(o),
						r,
						ar = [],
						e;
					try {
						while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
					} catch (error) {
						e = { error: error };
					} finally {
						try {
							if (r && !r.done && (m = i['return'])) m.call(i);
						} finally {
							if (e) throw e.error;
						}
					}
					return ar;
				};
			var creation = {
				overwrite: function (state, props) {
					Object.entries(props.payload.state).forEach(function (_a) {
						var _b = __read(_a, 2),
							key = _b[0],
							value = _b[1];
						// if (!state[key] || state[key].length === 0) state[key] = value;
						// console.log('creation.ts', key, value);
						if (value !== undefined) state[key] = value;
					});
				},
			};
			/* harmony default export */ const reducers_creation = creation; // CONCATENATED MODULE: ./utils/utils.ts

			var utils_read =
				(undefined && undefined.__read) ||
				function (o, n) {
					var m = typeof Symbol === 'function' && o[Symbol.iterator];
					if (!m) return o;
					var i = m.call(o),
						r,
						ar = [],
						e;
					try {
						while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
					} catch (error) {
						e = { error: error };
					} finally {
						try {
							if (r && !r.done && (m = i['return'])) m.call(i);
						} finally {
							if (e) throw e.error;
						}
					}
					return ar;
				};
			var __spreadArray =
				(undefined && undefined.__spreadArray) ||
				function (to, from, pack) {
					if (pack || arguments.length === 2)
						for (var i = 0, l = from.length, ar; i < l; i++) {
							if (ar || !(i in from)) {
								if (!ar) ar = Array.prototype.slice.call(from, 0, i);
								ar[i] = from[i];
							}
						}
					return to.concat(ar || Array.prototype.slice.call(from));
				};
			function round(number, decimals) {
				return Math.round(number * Math.pow(10, decimals)) / Math.pow(10, decimals);
			}
			function clamp(min, num, max) {
				return Math.min(Math.max(num, min), max);
			}
			function generateID(length) {
				if (length === void 0) {
					length = 10;
				}
				return Array(length)
					.fill(null)
					.map(function () {
						return Math.random().toString(36).slice(2, 3);
					})
					.join('')
					.toUpperCase();
			}
			function pastelColor() {
				return 'hsl(' + Math.round(360 * Math.random()) + ',' + Math.round(25 + 70 * Math.random()) + '%,' + Math.round(75 + 10 * Math.random()) + '%)';
			}
			function clone(data) {
				return JSON.parse(JSON.stringify(data));
			}
			function transformPoint(point, transform) {
				return {
					x: transform.a * point.x + transform.c * point.y + transform.e,
					y: transform.b * point.x + transform.d * point.y + transform.f,
				};
			}
			function screenBounds(context, view) {
				return {
					x1: -view.x / view.scale,
					y1: -view.y / view.scale,
					x2: -view.x / view.scale + context.canvas.width / view.scale,
					y2: -view.y / view.scale + context.canvas.height / view.scale,
				};
			}
			function rotatePoint(point, center, rotation) {
				return {
					x: (point.x - center.x) * Math.cos(rotation) - (point.y - center.y) * Math.sin(rotation) + center.x,
					y: (point.x - center.x) * Math.sin(rotation) + (point.y - center.y) * Math.cos(rotation) + center.y,
				};
			}
			// Splits array into two arrays
			function split(array, comparison) {
				return array.reduce(
					function (_a, element) {
						var _b = utils_read(_a, 2),
							pass = _b[0],
							fail = _b[1];
						return comparison(element) ? [__spreadArray(__spreadArray([], utils_read(pass), false), [element], false), fail] : [pass, __spreadArray(__spreadArray([], utils_read(fail), false), [element], false)];
					},
					[[], []]
				);
			}
			function DOMToCanvas(position, canvas, view) {
				var bounds = canvas.getBoundingClientRect();
				return {
					x: ((position.x - bounds.x) * window.devicePixelRatio - view.x) / view.scale,
					y: ((position.y - bounds.y) * window.devicePixelRatio - view.y) / view.scale,
				};
			}
			function CanvasToDOM(position, canvas, view) {
				var bounds = canvas.getBoundingClientRect();
				return {
					x: ((position.x + view.x) * view.scale) / window.devicePixelRatio + bounds.x,
					y: ((position.y + view.y) * view.scale) / window.devicePixelRatio + bounds.y,
				};
			}
			function reflectPoint(point, reflect) {
				return {
					x: reflect.x - (point.x - reflect.x),
					y: reflect.y - (point.y - reflect.y),
				};
			} // CONCATENATED MODULE: ./components/canvas/bound-bezier.ts

			var bound_bezier_read =
				(undefined && undefined.__read) ||
				function (o, n) {
					var m = typeof Symbol === 'function' && o[Symbol.iterator];
					if (!m) return o;
					var i = m.call(o),
						r,
						ar = [],
						e;
					try {
						while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
					} catch (error) {
						e = { error: error };
					} finally {
						try {
							if (r && !r.done && (m = i['return'])) m.call(i);
						} finally {
							if (e) throw e.error;
						}
					}
					return ar;
				};
			var bound_bezier_spreadArray =
				(undefined && undefined.__spreadArray) ||
				function (to, from, pack) {
					if (pack || arguments.length === 2)
						for (var i = 0, l = from.length, ar; i < l; i++) {
							if (ar || !(i in from)) {
								if (!ar) ar = Array.prototype.slice.call(from, 0, i);
								ar[i] = from[i];
							}
						}
					return to.concat(ar || Array.prototype.slice.call(from));
				};
			//(x0,y0) is start point; (x1,y1),(x2,y2) is control points; (x3,y3) is end point.
			function boundBezier(start, end) {
				if (start.controls.length === 0 || end.controls.length === 0) return [start, end];
				var x0 = start.x;
				var y0 = start.y;
				var x1 = start.controls[0].x;
				var y1 = start.controls[0].y;
				var x2 = end.controls[1].x;
				var y2 = end.controls[1].y;
				var x3 = end.x;
				var y3 = end.y;
				var t_values = [],
					x_values = [],
					y_values = [],
					a,
					b,
					c,
					t,
					t1,
					t2,
					b2ac,
					sqrtb2ac;
				for (var i = 0; i < 2; ++i) {
					if (i == 0) {
						b = 6 * x0 - 12 * x1 + 6 * x2;
						a = -3 * x0 + 9 * x1 - 9 * x2 + 3 * x3;
						c = 3 * x1 - 3 * x0;
					} else {
						b = 6 * y0 - 12 * y1 + 6 * y2;
						a = -3 * y0 + 9 * y1 - 9 * y2 + 3 * y3;
						c = 3 * y1 - 3 * y0;
					}
					if (Math.abs(a) < 1e-12) {
						if (Math.abs(b) < 1e-12) {
							continue;
						}
						t = -c / b;
						if (0 < t && t < 1) {
							t_values.push(t);
						}
						continue;
					}
					b2ac = b * b - 4 * c * a;
					if (b2ac < 0) {
						if (Math.abs(b2ac) < 1e-12) {
							t = -b / (2 * a);
							if (0 < t && t < 1) {
								t_values.push(t);
							}
						}
						continue;
					}
					sqrtb2ac = Math.sqrt(b2ac);
					t1 = (-b + sqrtb2ac) / (2 * a);
					if (0 < t1 && t1 < 1) {
						t_values.push(t1);
					}
					t2 = (-b - sqrtb2ac) / (2 * a);
					if (0 < t2 && t2 < 1) {
						t_values.push(t2);
					}
				}
				var j = t_values.length,
					mt;
				while (j--) {
					t = t_values[j];
					mt = 1 - t;
					x_values[j] = mt * mt * mt * x0 + 3 * mt * mt * t * x1 + 3 * mt * t * t * x2 + t * t * t * x3;
					y_values[j] = mt * mt * mt * y0 + 3 * mt * mt * t * y1 + 3 * mt * t * t * y2 + t * t * t * y3;
				}
				x_values.push(x0, x3);
				y_values.push(y0, y3);
				return [
					{ x: Math.min.apply(Math, bound_bezier_spreadArray([], bound_bezier_read(x_values), false)), y: Math.min.apply(Math, bound_bezier_spreadArray([], bound_bezier_read(y_values), false)) },
					{ x: Math.max.apply(Math, bound_bezier_spreadArray([], bound_bezier_read(x_values), false)), y: Math.max.apply(Math, bound_bezier_spreadArray([], bound_bezier_read(y_values), false)) },
				];
			} // CONCATENATED MODULE: ./components/canvas/rounded-poly.ts

			function roundedPoly(points) {
				var path = new Path2D();
				points.forEach(function (point, i, points) {
					if (point.radius === 0) return path.lineTo(point.x, point.y);
					var last_point = points[(i - 1 + points.length) % points.length];
					var next_point = points[(i + 1) % points.length];
					var vector_1 = unitVector(point, last_point);
					var vector_2 = unitVector(point, next_point);
					var _a = calculateRadius(vector_1, vector_2),
						angle = _a.angle,
						radius_sign = _a.radius_sign,
						counter_clockwise = _a.counter_clockwise;
					var half_angle = angle / 2;
					var length_out = Math.abs((Math.cos(half_angle) * point.radius) / Math.sin(half_angle));
					var radius = point.radius;
					var min_length = Math.min(vector_1.length, vector_2.length) / 2;
					if (length_out > min_length) {
						length_out = min_length;
						radius = Math.abs((length_out * Math.sin(half_angle)) / Math.cos(half_angle));
					}
					var x = point.x + vector_2.x * length_out - vector_2.y * radius * radius_sign;
					var y = point.y + vector_2.y * length_out + vector_2.x * radius * radius_sign;
					path.arc(x, y, radius, vector_1.angle + (Math.PI / 2) * radius_sign, vector_2.angle - (Math.PI / 2) * radius_sign, counter_clockwise);
				});
				path.closePath();
				return path;
			}
			function unitVector(point1, point2) {
				var delta_x = point2.x - point1.x;
				var delta_y = point2.y - point1.y;
				var length = Math.sqrt(delta_x * delta_x + delta_y * delta_y);
				return {
					x: delta_x / length,
					y: delta_y / length,
					angle: Math.atan2(delta_y, delta_x),
					length: length,
				};
			}
			function calculateRadius(vector_1, vector_2) {
				var sinA00 = vector_1.x * vector_2.y - vector_1.y * vector_2.x;
				var sinA90 = vector_1.x * vector_2.x + vector_1.y * vector_2.y;
				var angle = Math.asin(clamp(-1, sinA00, 1));
				if (sinA90 < 0) {
					if (angle < 0) {
						return {
							angle: angle + Math.PI,
							radius_sign: 1,
							counter_clockwise: false,
						};
					} else {
						return {
							angle: angle - Math.PI,
							radius_sign: -1,
							counter_clockwise: true,
						};
					}
				}
				if (angle < 0) {
					return {
						angle: angle,
						radius_sign: 1,
						counter_clockwise: false,
					};
				} else {
					return {
						angle: angle,
						radius_sign: -1,
						counter_clockwise: true,
					};
				}
			} // CONCATENATED MODULE: ./components/properties/colors.ts

			var colors_read =
				(undefined && undefined.__read) ||
				function (o, n) {
					var m = typeof Symbol === 'function' && o[Symbol.iterator];
					if (!m) return o;
					var i = m.call(o),
						r,
						ar = [],
						e;
					try {
						while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
					} catch (error) {
						e = { error: error };
					} finally {
						try {
							if (r && !r.done && (m = i['return'])) m.call(i);
						} finally {
							if (e) throw e.error;
						}
					}
					return ar;
				};

			var Colors = {
				toString: function (hsba, type) {
					var _a;
					if (type === void 0) {
						type = 'hsla';
					}
					var hsla = Colors.hsbaToHsla(hsba);
					switch (type) {
						case 'hsl':
							return Colors.toHslString(hsla);
						case 'hsla':
							return Colors.toHslaString(hsla);
						case 'hsb':
							return Colors.toHsbString(hsla);
						case 'hsba':
							return Colors.toHsbaString(hsla);
						case 'rgb':
							return Colors.toRgbString(Colors.hslaToRgba(hsla));
						case 'rgba':
							return Colors.toRgbaString(Colors.hslaToRgba(hsla));
						case 'hex3':
							return Colors.rgbaToHex4(Colors.hslaToRgba(hsla).slice(0, 3));
						case 'hex4':
							return Colors.rgbaToHex4(Colors.hslaToRgba(hsla));
						case 'hex6':
							return Colors.rgbaToHex8(Colors.hslaToRgba(hsla).slice(0, 3));
						case 'hex8':
							return Colors.rgbaToHex8(Colors.hslaToRgba(hsla));
						case 'name':
							var hex6 = Colors.toString(hsba, 'hex6');
							return (_a = names[hex6]) !== null && _a !== void 0 ? _a : hex6;
					}
				},
				toHslString: function (_a) {
					var _b = colors_read(_a, 4),
						h = _b[0],
						s = _b[1],
						l = _b[2],
						a = _b[3];
					return 'hsl(' + Math.floor(h * 360) + ', ' + Math.floor(s * 100) + '%, ' + Math.floor(l * 100) + '%)';
				},
				toHslaString: function (_a) {
					var _b = colors_read(_a, 4),
						h = _b[0],
						s = _b[1],
						l = _b[2],
						a = _b[3];
					return 'hsla(' + Math.floor(h * 360) + ', ' + Math.floor(s * 100) + '%, ' + Math.floor(l * 100) + '%, ' + round(a, 2) + ')';
				},
				toHsbString: function (_a) {
					var _b = colors_read(_a, 4),
						h = _b[0],
						s = _b[1],
						b = _b[2],
						a = _b[3];
					return 'hsb(' + Math.floor(h * 360) + ', ' + Math.floor(s * 100) + '%, ' + Math.floor(b * 100) + '%)';
				},
				toHsbaString: function (_a) {
					var _b = colors_read(_a, 4),
						h = _b[0],
						s = _b[1],
						b = _b[2],
						a = _b[3];
					return 'hsba(' + Math.floor(h * 360) + ', ' + Math.floor(s * 100) + '%, ' + Math.floor(b * 100) + '%, ' + round(a, 2) + ')';
				},
				toRgbString: function (_a) {
					var _b = colors_read(_a, 4),
						r = _b[0],
						g = _b[1],
						b = _b[2],
						a = _b[3];
					return 'rgb(' + Math.floor(r * 255) + ', ' + Math.floor(g * 255) + ', ' + Math.floor(b * 255) + ')';
				},
				toRgbaString: function (_a) {
					var _b = colors_read(_a, 4),
						r = _b[0],
						g = _b[1],
						b = _b[2],
						a = _b[3];
					return 'rgba(' + Math.floor(r * 255) + ', ' + Math.floor(g * 255) + ', ' + Math.floor(b * 255) + ', ' + round(a, 2) + ')';
				},
				stringToRgba: function (color) {
					if (typeof color !== 'string') return color;
					var div = document.createElement('div');
					div.style.background = color;
					document.body.appendChild(div);
					color = getComputedStyle(div).backgroundColor;
					div.remove();
					var color_array = color
						.split('(')[1]
						.slice(0, -1)
						.split(',')
						.map(Number)
						.map(function (color, i) {
							return i < 3 ? color / 255 : color;
						});
					if (color_array.length < 4) color_array.push(1);
					return color_array;
				},
				rgbaToHex4: function (rgba) {
					return (
						'#' +
						rgba
							.map(function (color) {
								return Math.round(15 * color).toString(16);
							})
							.join('')
					).toUpperCase();
				},
				rgbaToHex8: function (rgba) {
					return (
						'#' +
						rgba
							.map(function (color) {
								return Math.round(255 * color)
									.toString(16)
									.padStart(2, '0');
							})
							.join('')
					).toUpperCase();
				},
				hslaToRgba: function (_a) {
					var _b = colors_read(_a, 4),
						h = _b[0],
						s = _b[1],
						l = _b[2],
						a = _b[3];
					var b = s * Math.min(l, 1 - l);
					var f = function (n) {
						var k = (n + h * 12) % 12;
						return l - b * Math.max(Math.min(k - 3, 9 - k, 1), -1);
					};
					return [f(0), f(8), f(4), a];
				},
				hsbaToHsla: function (_a) {
					var _b = colors_read(_a, 4),
						h = _b[0],
						s = _b[1],
						b = _b[2],
						a = _b[3];
					var l = ((2 - s) * b) / 2;
					if (l !== 0) {
						if (l === 1) {
							s = 0;
						} else if (l < 0.5) {
							s = (s * b) / (l * 2);
						} else {
							s = (s * b) / (2 - l * 2);
						}
					}
					return [h, s, l, a];
				},
				hslaToHsba: function (_a) {
					var _b = colors_read(_a, 4),
						h = _b[0],
						s = _b[1],
						l = _b[2],
						a = _b[3];
					var hsb1 = s * (l < 0.5 ? l : 1 - l);
					var hsbS = hsb1 === 0 ? 0 : (2 * hsb1) / (l + hsb1);
					var hsbV = l + hsb1;
					return [h, hsbS, hsbV, a];
				},
				rgbaToHsla: function (_a) {
					var _b = colors_read(_a, 4),
						r = _b[0],
						g = _b[1],
						b = _b[2],
						a = _b[3];
					var max = Math.max(r, g, b);
					var min = Math.min(r, g, b);
					var h;
					var s;
					var l = (max + min) / 2;
					if (max === min) {
						h = s = 0; // achromatic
					} else {
						var d = max - min;
						s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
						switch (max) {
							case r:
								h = (g - b) / d + (g < b ? 6 : 0);
								break;
							case g:
								h = (b - r) / d + 2;
								break;
							case b:
								h = (r - g) / d + 4;
								break;
						}
						h /= 6;
					}
					return [h, s, l, a];
				},
				hexToRgba: function (hex) {
					var r = parseInt(hex.slice(1, 2), 16) / 255;
					var g = parseInt(hex.slice(3, 2), 16) / 255;
					var b = parseInt(hex.slice(5, 2), 16) / 255;
					var a = hex.length > 7 ? parseInt(hex.slice(7, 2), 16) / 255 : 1;
					return [r, g, b, a];
				},
				isValid: function (color) {
					if (typeof CSS === 'undefined' || typeof CSS.supports !== 'function') return true;
					return CSS.supports('color', color);
				},
				getFormat: function (color) {
					color = color.toLowerCase();
					if (Colors.isValid(color) === false) return '';
					if (color.startsWith('#')) return 'hex' + (color.length - 1);
					if (color.includes('(')) return color.split('(')[0];
					return 'name';
				},
				// Used only for testing
				circle: function (color) {
					var rgba = Colors.stringToRgba(color);
					var hsla = Colors.rgbaToHsla(rgba);
					var hsba = Colors.hslaToHsba(hsla);
					var hsla2 = Colors.hsbaToHsla(hsba);
					var rgba2 = Colors.hslaToRgba(hsla2);
					var hex6 = Colors.rgbaToHex8(rgba2.slice(0, 3));
					var name = names[hex6];
					return name;
				},
				test: function () {
					console.log(Object.values(names).length);
					return Object.values(names).filter(function (color) {
						return Colors.circle(color) === color;
					});
				},
			};
			if (typeof window !== 'undefined') {
				window.Colors = Colors;
			}
			/* harmony default export */ const colors = Colors;
			var names = {
				'#F0F8FF': 'aliceblue',
				'#FAEBD7': 'antiquewhite',
				'#00FFFF': 'aqua',
				'#7FFFD4': 'aquamarine',
				'#F0FFFF': 'azure',
				'#F5F5DC': 'beige',
				'#FFE4C4': 'bisque',
				'#000000': 'black',
				'#FFEBCD': 'blanchedalmond',
				'#0000FF': 'blue',
				'#8A2BE2': 'blueviolet',
				'#A52A2A': 'brown',
				'#DEB887': 'burlywood',
				'#5F9EA0': 'cadetblue',
				'#7FFF00': 'chartreuse',
				'#D2691E': 'chocolate',
				'#FF7F50': 'coral',
				'#6495ED': 'cornflowerblue',
				'#FFF8DC': 'cornsilk',
				'#DC143C': 'crimson',
				'#00008B': 'darkblue',
				'#008B8B': 'darkcyan',
				'#B8860B': 'darkgoldenrod',
				'#A9A9A9': 'darkgray',
				'#006400': 'darkgreen',
				'#BDB76B': 'darkkhaki',
				'#8B008B': 'darkmagenta',
				'#556B2F': 'darkolivegreen',
				'#FF8C00': 'darkorange',
				'#9932CC': 'darkorchid',
				'#8B0000': 'darkred',
				'#E9967A': 'darksalmon',
				'#8FBC8F': 'darkseagreen',
				'#483D8B': 'darkslateblue',
				'#2F4F4F': 'darkslategray',
				'#00CED1': 'darkturquoise',
				'#9400D3': 'darkviolet',
				'#FF1493': 'deeppink',
				'#00BFFF': 'deepskyblue',
				'#696969': 'dimgray',
				'#1E90FF': 'dodgerblue',
				'#B22222': 'firebrick',
				'#FFFAF0': 'floralwhite',
				'#228B22': 'forestgreen',
				'#FF00FF': 'fuchsia',
				'#DCDCDC': 'gainsboro',
				'#F8F8FF': 'ghostwhite',
				'#FFD700': 'gold',
				'#DAA520': 'goldenrod',
				'#ADFF2F': 'greenyellow',
				'#808080': 'gray',
				'#008000': 'green',
				'#F0FFF0': 'honeydew',
				'#FF69B4': 'hotpink',
				'#CD5C5C': 'indianred',
				'#4B0082': 'indigo',
				'#FFFFF0': 'ivory',
				'#F0E68C': 'khaki',
				'#E6E6FA': 'lavender',
				'#FFF0F5': 'lavenderblush',
				'#7CFC00': 'lawngreen',
				'#FFFACD': 'lemonchiffon',
				'#ADD8E6': 'lightblue',
				'#F08080': 'lightcoral',
				'#E0FFFF': 'lightcyan',
				'#FAFAD2': 'lightgoldenrodyellow',
				'#D3D3D3': 'lightgray',
				'#90EE90': 'lightgreen',
				'#FFB6C1': 'lightpink',
				'#FFA07A': 'lightsalmon',
				'#20B2AA': 'lightseagreen',
				'#87CEFA': 'lightskyblue',
				'#778899': 'lightslategray',
				'#FFFFE0': 'lightyellow',
				'#00FF00': 'lime',
				'#32CD32': 'limegreen',
				'#FAF0E6': 'linen',
				'#800000': 'maroon',
				'#66CDAA': 'mediumaquamarine',
				'#0000CD': 'mediumblue',
				'#BA55D3': 'mediumorchid',
				'#9370DB': 'mediumpurple',
				'#3CB371': 'mediumseagreen',
				'#7B68EE': 'mediumslateblue',
				'#00FA9A': 'mediumspringgreen',
				'#48D1CC': 'mediumturquoise',
				'#C71585': 'mediumvioletred',
				'#191970': 'midnightblue',
				'#F5FFFA': 'mintcream',
				'#FFE4E1': 'mistyrose',
				'#FFE4B5': 'moccasin',
				'#FFDEAD': 'navajowhite',
				'#000080': 'navy',
				'#FDF5E6': 'oldlace',
				'#808000': 'olive',
				'#6B8E23': 'olivedrab',
				'#FFA500': 'orange',
				'#FF4500': 'orangered',
				'#DA70D6': 'orchid',
				'#EEE8AA': 'palegoldenrod',
				'#98FB98': 'palegreen',
				'#AFEEEE': 'paleturquoise',
				'#DB7093': 'palevioletred',
				'#FFEFD5': 'papayawhip',
				'#FFDAB9': 'peachpuff',
				'#CD853F': 'peru',
				'#FFC0CB': 'pink',
				'#DDA0DD': 'plum',
				'#B0E0E6': 'powderblue',
				'#800080': 'purple',
				'#663399': 'rebeccapurple',
				'#FF0000': 'red',
				'#BC8F8F': 'rosybrown',
				'#4169E1': 'royalblue',
				'#8B4513': 'saddlebrown',
				'#FA8072': 'salmon',
				'#F4A460': 'sandybrown',
				'#2E8B57': 'seagreen',
				'#FFF5EE': 'seashell',
				'#A0522D': 'sienna',
				'#C0C0C0': 'silver',
				'#87CEEB': 'skyblue',
				'#6A5ACD': 'slateblue',
				'#708090': 'slategray',
				'#FFFAFA': 'snow',
				'#00FF7F': 'springgreen',
				'#4682B4': 'steelblue',
				'#D2B48C': 'tan',
				'#008080': 'teal',
				'#D8BFD8': 'thistle',
				'#FF6347': 'tomato',
				'#40E0D0': 'turquoise',
				'#EE82EE': 'violet',
				'#F5DEB3': 'wheat',
				'#FFFFFF': 'white',
				'#F5F5F5': 'whitesmoke',
				'#FFFF00': 'yellow',
				'#9ACD32': 'yellowgreen',
			}; // CONCATENATED MODULE: ./components/canvas/elements/element.ts

			var __assign =
				(undefined && undefined.__assign) ||
				function () {
					__assign =
						Object.assign ||
						function (t) {
							for (var s, i = 1, n = arguments.length; i < n; i++) {
								s = arguments[i];
								for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
							}
							return t;
						};
					return __assign.apply(this, arguments);
				};
			var element_read =
				(undefined && undefined.__read) ||
				function (o, n) {
					var m = typeof Symbol === 'function' && o[Symbol.iterator];
					if (!m) return o;
					var i = m.call(o),
						r,
						ar = [],
						e;
					try {
						while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
					} catch (error) {
						e = { error: error };
					} finally {
						try {
							if (r && !r.done && (m = i['return'])) m.call(i);
						} finally {
							if (e) throw e.error;
						}
					}
					return ar;
				};
			var element_spreadArray =
				(undefined && undefined.__spreadArray) ||
				function (to, from, pack) {
					if (pack || arguments.length === 2)
						for (var i = 0, l = from.length, ar; i < l; i++) {
							if (ar || !(i in from)) {
								if (!ar) ar = Array.prototype.slice.call(from, 0, i);
								ar[i] = from[i];
							}
						}
					return to.concat(ar || Array.prototype.slice.call(from));
				};

			var element_images = {};
			var Element = /** @class */ (function () {
				function Element() {}
				Element.create = function (id, position, selected) {
					return {
						id: id,
						type: '',
						editing: false,
						selected: selected,
						hover: false,
						fill: [{ id: id + '2123', type: 'Solid', color: [0, 0, 0.8, 1], format: 'hex4', visible: true }],
						stroke: [],
						effect: [],
						points: [],
						rotation: 0,
						visible: true,
						locked: false,
					};
				};
				Element.makePoints = function (x, y, width, height, radius) {
					return [
						{ x: x, y: y },
						{ x: x + width, y: y },
						{ x: x + width, y: y + height },
						{ x: x, y: y + height },
					].map(function (point, i) {
						return __assign(__assign({}, point), { i: i, radius: radius, controls: [] });
					});
				};
				Element.path = function (element) {
					return roundedPoly(element.points);
				};
				Element.fill = function (element, context, path) {
					var _this = this;
					element.fill
						.filter(function (fill) {
							return fill.visible;
						})
						.forEach(function (fill) {
							if (fill.type === 'Solid') {
								context.fillStyle = colors.toString(fill.color);
								context.fill(path);
							} else if (fill.type === 'Image') {
								if (!element_images[fill.src]) {
									element_images[fill.src] = new Image();
									element_images[fill.src].src = fill.src;
									element_images[fill.src].onerror = function () {
										return (element_images[fill.src].broken = true);
									};
									element_images[fill.src].onload = function () {
										return window.redraw();
									};
								} else if (element_images[fill.src].complete && !element_images[fill.src].broken) {
									var bounds = _this.bound(element);
									var center = _this.center(element);
									context.save();
									context.clip(path);
									context.translate(center.x, center.y);
									context.rotate(element.rotation);
									context.drawImage(element_images[fill.src], fill.x - bounds.width / 2, fill.y - bounds.height / 2, bounds.width, bounds.height);
									context.restore();
								}
							}
						});
				};
				Element.stroke = function (element, context, path) {
					return Math.max.apply(
						Math,
						element_spreadArray(
							[],
							element_read(
								element.stroke
									.filter(function (stroke) {
										return stroke.visible;
									})
									.map(function (stroke) {
										if (stroke.width === 0) return;
										context.save();
										context.strokeStyle = colors.toString(stroke.color);
										context.lineWidth = stroke.width;
										if (stroke.type === 'Inside') {
											context.clip(path);
											context.lineWidth = stroke.width * 2;
										} else if (stroke.type === 'Outside') {
											var clone = new Path2D(path);
											clone.rect(Number.MAX_SAFE_INTEGER / 2, -Number.MAX_SAFE_INTEGER / 2, -Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER);
											context.clip(clone);
											context.lineWidth = stroke.width * 2;
										}
										context.stroke(path); // Center
										context.restore();
										return stroke.width;
									})
							),
							false
						)
					);
				};
				Element.underEffect = function (element, context, path, view) {
					var center = this.center(element);
					element.effect
						.filter(function (effect) {
							return effect.visible;
						})
						.forEach(function (effect) {
							if (effect.type === 'Drop shadow') {
								context.save();
								context.filter = 'blur(' + effect.blur * 0.2 * view.scale + 'px)';
								context.fillStyle = colors.toString(effect.color);
								context.translate(center.x, center.y);
								var spread = Math.exp(effect.spread * 0.005);
								context.scale(spread, spread);
								context.translate(-center.x, -center.y);
								context.translate(effect.x, effect.y);
								context.fill(path);
								context.restore();
							}
						});
				};
				Element.overEffect = function (element, context, path, view) {
					var center = this.center(element);
					element.effect
						.filter(function (effect) {
							return effect.visible;
						})
						.forEach(function (effect) {
							if (effect.type === 'Inner shadow') {
								context.save();
								context.filter = 'blur(' + effect.blur * 0.2 * view.scale + 'px)';
								context.fillStyle = colors.toString(effect.color);
								context.clip(path);
								context.translate(effect.x, effect.y);
								var spread = Math.exp(-effect.spread * 0.005);
								context.translate(center.x, center.y);
								context.scale(spread, spread);
								context.translate(-center.x, -center.y);
								var clone = new Path2D(path);
								clone.rect(Number.MAX_SAFE_INTEGER / 2, -Number.MAX_SAFE_INTEGER / 2, -Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER);
								context.fill(clone);
								context.restore();
							}
						});
				};
				Element.draw = function (element, context, cursor, view) {
					var path = this.path(element);
					this.underEffect(element, context, path, view);
					this.fill(element, context, path);
					this.overEffect(element, context, path, view);
					var fill = element.fill.length && context.isPointInPath(path, cursor.x, cursor.y);
					context.lineWidth = this.stroke(element, context, path);
					var stroke = element.stroke.length && context.isPointInStroke(path, cursor.x, cursor.y);
					return fill || stroke;
				};
				Element.resize = function (element, position, last_position) {
					var center = this.center(element);
					var bounds = this.bound(element);
					if (bounds.width === 0 || bounds.height === 0) return; // This might be an issue
					// Find opposite corner
					var opposite = reflectPoint(last_position, center);
					// Rotate all points to 0 deg
					var new_opposite = rotatePoint(opposite, center, -element.rotation);
					var new_position = rotatePoint(position, center, -element.rotation);
					elements_elements[element.type].getPoints(element).forEach(function (point) {
						var rotated = rotatePoint(point, center, -element.rotation);
						point.x = rotated.x;
						point.y = rotated.y;
						point.controls.forEach(function (control) {
							var rotated = rotatePoint(control, center, -element.rotation);
							control.x = rotated.x;
							control.y = rotated.y;
						});
					});
					// Get change ratio in width and height
					var width_ratio = Math.abs(new_position.x - new_opposite.x) / bounds.width;
					var height_ratio = Math.abs(new_position.y - new_opposite.y) / bounds.height;
					// Top left of bounding box
					var x_min_old = Math.min.apply(
						Math,
						element_spreadArray(
							[],
							element_read(
								elements_elements[element.type].getPoints(element).map(function (point) {
									return point.x;
								})
							),
							false
						)
					);
					var y_min_old = Math.min.apply(
						Math,
						element_spreadArray(
							[],
							element_read(
								elements_elements[element.type].getPoints(element).map(function (point) {
									return point.y;
								})
							),
							false
						)
					);
					// Top left of resize box
					var x_min_new = Math.min(new_opposite.x, new_position.x);
					var y_min_new = Math.min(new_opposite.y, new_position.y);
					// Scale point positions
					elements_elements[element.type].getPoints(element).forEach(function (point) {
						point.x = (point.x - x_min_old) * width_ratio + x_min_new;
						point.y = (point.y - y_min_old) * height_ratio + y_min_new;
						point.controls.forEach(function (control) {
							control.x = (control.x - x_min_old) * width_ratio + x_min_new;
							control.y = (control.y - y_min_old) * height_ratio + y_min_new;
						});
					});
					// Rotate points back
					elements_elements[element.type].getPoints(element).forEach(function (point) {
						var rotated = rotatePoint(point, center, element.rotation);
						point.x = rotated.x;
						point.y = rotated.y;
						point.controls.forEach(function (control) {
							var rotated = rotatePoint(control, center, element.rotation);
							control.x = rotated.x;
							control.y = rotated.y;
						});
					});
				};
				Element.stretch = function (element, position, last_position) {
					return;
				};
				Element.outline = function (element, context, color, line_width) {
					context.strokeStyle = color;
					context.lineWidth = line_width;
					var path = this.path(element);
					context.stroke(path);
				};
				Element.onScreen = function (element, screen) {
					var bounds = this.positiveBound(element);
					return !(bounds.x > screen.x2 || bounds.y > screen.y2 || bounds.x + bounds.width < screen.x1 || bounds.y + bounds.height < screen.y1);
				};
				Element.highlight = function (element, context, cursor, highlight, line, box) {
					var action = undefined;
					if (this.drawBound(element, context, cursor, highlight, line)) action = 'stretch';
					if (this.drawRotate(element, context, cursor, box)) action = 'rotate';
					if (this.drawResize(element, context, cursor, highlight, line, box)) action = 'resize';
					return action ? { action: action, element: element } : undefined;
				};
				// Maybe this can be removed
				Element.insideBound = function (element, context, cursor) {
					var bounds = this.bound(element);
					var center = this.center(element);
					context.save();
					context.translate(center.x, center.y);
					context.rotate(element.rotation);
					context.beginPath();
					context.rect(-bounds.width / 2, -bounds.height / 2, bounds.width, bounds.height);
					context.restore();
					return context.isPointInPath(cursor.x, cursor.y);
				};
				Element.drawBound = function (element, context, cursor, color, line) {
					var bounds = this.bound(element);
					var center = this.center(element);
					context.save();
					context.translate(center.x, center.y);
					context.rotate(element.rotation);
					context.strokeStyle = color;
					context.beginPath();
					context.rect(-bounds.width / 2, -bounds.height / 2, bounds.width, bounds.height);
					context.lineWidth = line * 2;
					var hov = context.isPointInStroke(cursor.x, cursor.y);
					context.lineWidth = line;
					context.stroke();
					context.restore();
					return hov;
				};
				// context.setTransform(horizontal_scaling, horizontal_skewing, vertical_skewing, vertical_scaling, horizontal_translation, vertical_translation);
				Element.drawResize = function (element, context, cursor, color, line, box_size) {
					var bounds = this.bound(element);
					var center = this.center(element);
					context.save();
					context.translate(center.x, center.y);
					context.rotate(element.rotation);
					bounds.x = -bounds.width / 2;
					bounds.y = -bounds.height / 2;
					context.fillStyle = 'white';
					context.strokeStyle = color;
					context.lineWidth = line;
					context.beginPath();
					this.boxes(element.id, bounds, box_size).forEach(function (square) {
						return context.rect(square.x, square.y, square.width, square.height);
					});
					// Check if zoomed in enough
					if (Math.abs(bounds.width) + Math.abs(bounds.height) > box_size * 4) {
						context.fill();
						context.stroke();
					}
					context.restore();
					return context.isPointInPath(cursor.x, cursor.y);
				};
				Element.drawRotate = function (element, context, cursor, box_size) {
					var bounds = this.bound(element);
					var center = this.center(element);
					context.save();
					context.translate(center.x, center.y);
					context.rotate(element.rotation);
					bounds.x = -bounds.width / 2 - Math.sign(bounds.width) * box_size;
					bounds.y = -bounds.height / 2 - Math.sign(bounds.height) * box_size;
					bounds.width += Math.sign(bounds.width) * box_size * 2;
					bounds.height += Math.sign(bounds.height) * box_size * 2;
					context.beginPath();
					this.boxes(element.id, bounds, box_size * 2).forEach(function (square) {
						return context.rect(square.x, square.y, square.width, square.height);
					});
					context.restore();
					return context.isPointInPath(cursor.x, cursor.y);
				};
				Element.drawPoints = function (element, context, cursor, color, line, box_size) {
					context.strokeStyle = color;
					context.lineWidth = line;
					var diamond_size = box_size * 0.7;
					var hovering = elements_elements[element.type]
						.getPoints(element)
						.map(function (point) {
							context.fillStyle = 'white';
							var control = point.controls
								.map(function (control, i) {
									var angle = Math.atan2(control.y - point.y, control.x - point.x) - Math.PI / 4;
									context.beginPath();
									context.moveTo(point.x, point.y);
									context.lineTo(control.x, control.y);
									context.stroke();
									context.beginPath();
									context.translate(control.x, control.y);
									context.rotate(angle);
									context.rect(-diamond_size, -diamond_size, diamond_size * 2, diamond_size * 2);
									context.rotate(-angle);
									context.translate(-control.x, -control.y);
									var hovering = context.isPointInPath(cursor.x, cursor.y);
									context.fillStyle = hovering ? color : 'white';
									context.fill();
									context.stroke();
									if (hovering) return i;
								})
								.filter(function (control) {
									return control !== undefined;
								})
								.pop();
							context.beginPath();
							context.moveTo(point.x + box_size, point.y);
							context.arc(point.x, point.y, box_size, 0, 2 * Math.PI);
							var hovering = context.isPointInPath(cursor.x, cursor.y);
							context.fillStyle = hovering ? color : 'white';
							context.fill();
							context.stroke();
							if (hovering || control !== undefined) return __assign(__assign({}, point), { control: control }); //can replace this for index
						})
						.filter(function (point) {
							return point;
						})
						.pop();
					return hovering ? { element: element, action: 'edit', point: hovering } : undefined;
				};
				Element.edit = function (element, position, last_position, point) {
					var delta_x = position.x - last_position.x;
					var delta_y = position.y - last_position.y;
					if (point.control !== undefined) {
						elements_elements[element.type].getPoints(element)[point.i].controls[point.control].x += delta_x;
						elements_elements[element.type].getPoints(element)[point.i].controls[point.control].y += delta_y;
						if (true) {
							var opposite = point.control === 0 ? 1 : 0;
							elements_elements[element.type].getPoints(element)[point.i].controls[opposite].x -= delta_x;
							elements_elements[element.type].getPoints(element)[point.i].controls[opposite].y -= delta_y;
						}
					} else {
						elements_elements[element.type].getPoints(element)[point.i].x += delta_x;
						elements_elements[element.type].getPoints(element)[point.i].y += delta_y;
						elements_elements[element.type].getPoints(element)[point.i].controls.forEach(function (control) {
							control.x += delta_x;
							control.y += delta_y;
						});
					}
				};
				Element.center = function (element) {
					// const points = Elements[element.type].getPoints(element).map((point) => rotatePoint(point, { x: 0, y: 0 }, -element.rotation));
					var points = elements_elements[element.type]
						.getPoints(element)
						.map(function (point) {
							return __assign(__assign({}, rotatePoint(point, { x: 0, y: 0 }, -element.rotation)), {
								controls: point.controls.map(function (control) {
									return rotatePoint(control, { x: 0, y: 0 }, -element.rotation);
								}),
							});
						})
						.map(function (point, i, points) {
							return boundBezier(point, points[(i + 1) % points.length]);
						})
						.flat();
					var xs = points.map(function (point) {
						return point.x;
					});
					var ys = points.map(function (point) {
						return point.y;
					});
					var x_min = Math.min.apply(Math, element_spreadArray([], element_read(xs), false));
					var x_max = Math.max.apply(Math, element_spreadArray([], element_read(xs), false));
					var y_min = Math.min.apply(Math, element_spreadArray([], element_read(ys), false));
					var y_max = Math.max.apply(Math, element_spreadArray([], element_read(ys), false));
					return rotatePoint(
						{
							x: x_min + (x_max - x_min) / 2,
							y: y_min + (y_max - y_min) / 2,
						},
						{ x: 0, y: 0 },
						element.rotation
					);
				};
				Element.bound = function (element) {
					var center = this.center(element);
					var points = elements_elements[element.type]
						.getPoints(element)
						.map(function (point) {
							return __assign(__assign({}, rotatePoint(point, center, -element.rotation)), {
								controls: point.controls.map(function (control) {
									return rotatePoint(control, center, -element.rotation);
								}),
							});
						})
						.map(function (point, i, points) {
							return boundBezier(point, points[(i + 1) % points.length]);
						})
						.flat();
					var xs = points.map(function (point) {
						return point.x;
					});
					var ys = points.map(function (point) {
						return point.y;
					});
					var x_min = Math.min.apply(Math, element_spreadArray([], element_read(xs), false));
					var x_max = Math.max.apply(Math, element_spreadArray([], element_read(xs), false));
					var y_min = Math.min.apply(Math, element_spreadArray([], element_read(ys), false));
					var y_max = Math.max.apply(Math, element_spreadArray([], element_read(ys), false));
					return {
						x: x_min,
						y: y_min,
						width: x_max - x_min,
						height: y_max - y_min,
					};
				};
				Element.getFill = function (element) {
					return element.fill;
				};
				Element.setFill = function (element, props) {
					element.fill.forEach(function (fill) {
						if (props.id === fill.id) {
							Object.entries(props).forEach(function (_a) {
								var _b = element_read(_a, 2),
									key = _b[0],
									value = _b[1];
								fill[key] = value;
							});
						}
					});
				};
				Element.getStroke = function (element) {
					return element.stroke;
				};
				Element.setStroke = function (element, props) {
					element.stroke.forEach(function (stroke) {
						if (props.id === stroke.id) {
							Object.entries(props).forEach(function (_a) {
								var _b = element_read(_a, 2),
									key = _b[0],
									value = _b[1];
								stroke[key] = value;
							});
						}
					});
				};
				Element.getEffect = function (element) {
					return element.effect;
				};
				Element.setEffect = function (element, props) {
					element.effect.forEach(function (effect) {
						if (props.id === effect.id) {
							Object.entries(props).forEach(function (_a) {
								var _b = element_read(_a, 2),
									key = _b[0],
									value = _b[1];
								effect[key] = value;
							});
						}
					});
				};
				Element.getPoints = function (element) {
					return element.points;
				};
				Element.positiveBound = function (element) {
					var bounds = this.bound(element);
					return {
						x: Math.min(bounds.x, bounds.x + bounds.width),
						y: Math.min(bounds.y, bounds.y + bounds.height),
						width: Math.abs(bounds.width),
						height: Math.abs(bounds.height),
					};
				};
				Element.points = function (element) {
					return elements_elements[element.type].getPoints(element).concat(this.center(element));
				};
				Element.move = function (element, position, last_position) {
					var delta_x = position.x - last_position.x;
					var delta_y = position.y - last_position.y;
					elements_elements[element.type].getPoints(element).forEach(function (point) {
						point.x += delta_x;
						point.y += delta_y;
						point.controls.forEach(function (control) {
							control.x += delta_x;
							control.y += delta_y;
						});
					});
					if (Array.isArray(element.elements))
						element.elements.forEach(function (element) {
							return elements_elements[element.type].move(element, position, last_position);
						});
				};
				Element.rotate = function (element, position, last_position) {
					var center = this.center(element);
					var rotation = Math.atan2(center.y - position.y, center.x - position.x) - Math.atan2(center.y - last_position.y, center.x - last_position.x);
					elements_elements[element.type].getPoints(element).forEach(function (point) {
						var rotated = rotatePoint(point, center, rotation);
						point.x = rotated.x;
						point.y = rotated.y;
						point.controls.forEach(function (control) {
							var rotated = rotatePoint(control, center, rotation);
							control.x = rotated.x;
							control.y = rotated.y;
						});
					});
					this.addRotation(element, rotation);
				};
				Element.addRotation = function (element, rotation) {
					element.rotation += rotation;
					if (Array.isArray(element.elements))
						element.elements.forEach(function (element) {
							return elements_elements[element.type].addRotation(element, rotation);
						});
				};
				Element.boxes = function (id, bounds, box_size) {
					return [
						{
							id: id,
							x: bounds.x - box_size,
							y: bounds.y - box_size,
							width: box_size * 2,
							height: box_size * 2,
						},
						{
							id: id,
							x: bounds.x + bounds.width - box_size,
							y: bounds.y - box_size,
							width: box_size * 2,
							height: box_size * 2,
						},
						{
							id: id,
							x: bounds.x - box_size,
							y: bounds.y + bounds.height - box_size,
							width: box_size * 2,
							height: box_size * 2,
						},
						{
							id: id,
							x: bounds.x + bounds.width - box_size,
							y: bounds.y + bounds.height - box_size,
							width: box_size * 2,
							height: box_size * 2,
						},
					];
				};
				return Element;
			})();
			/* harmony default export */ const elements_element = Element; // CONCATENATED MODULE: ./components/canvas/elements/circle.ts

			var __extends =
				(undefined && undefined.__extends) ||
				(function () {
					var extendStatics = function (d, b) {
						extendStatics =
							Object.setPrototypeOf ||
							({ __proto__: [] } instanceof Array &&
								function (d, b) {
									d.__proto__ = b;
								}) ||
							function (d, b) {
								for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
							};
						return extendStatics(d, b);
					};
					return function (d, b) {
						if (typeof b !== 'function' && b !== null) throw new TypeError('Class extends value ' + String(b) + ' is not a constructor or null');
						extendStatics(d, b);
						function __() {
							this.constructor = d;
						}
						d.prototype = b === null ? Object.create(b) : ((__.prototype = b.prototype), new __());
					};
				})();

			var Circle = /** @class */ (function (_super) {
				__extends(Circle, _super);
				function Circle() {
					return (_super !== null && _super.apply(this, arguments)) || this;
				}
				Circle.create = function (id, position, selected) {
					return Object.assign(_super.create.call(this, id, position, selected), {
						label: 'Circle',
						type: 'circle',
						x: position.x,
						y: position.y,
						radius: 0,
						start_angle: 0,
						end_angle: 6.283185307179586,
						counter_clockwise: true,
					});
				};
				Circle.points = function (circle) {
					return [
						{
							x: circle.x,
							y: circle.y,
						},
					];
				};
				Circle.path = function (circle) {
					var path = new Path2D();
					path.arc(circle.x, circle.y, Math.abs(circle.radius), circle.start_angle, circle.end_angle, circle.counter_clockwise);
					return path;
				};
				Circle.draw = function (circle, context, cursor, view) {
					context.beginPath();
					var path = this.path(circle);
					this.fill(circle, context, path);
					this.stroke(circle, context, path);
					return context.isPointInPath(path, cursor.x, cursor.y);
				};
				Circle.outline = function (circle, context, color, line_width) {
					context.strokeStyle = color;
					context.lineWidth = line_width;
					context.beginPath();
					context.arc(circle.x, circle.y, Math.abs(circle.radius), circle.start_angle, circle.end_angle);
					context.stroke();
				};
				Circle.bound = function (circle) {
					return {
						x: circle.x - circle.radius,
						y: circle.y - circle.radius,
						width: circle.radius * 2,
						height: circle.radius * 2,
					};
				};
				Circle.resize = function (ellipse, position, last_position) {
					var center = this.center(ellipse);
					var opposite = {
						x: center.x - (last_position.x - center.x),
						y: center.y - (last_position.y - center.y),
					};
					var new_center = {
						x: (opposite.x + position.x) / 2,
						y: (opposite.y + position.y) / 2,
					};
					var new_opposite = rotatePoint(opposite, new_center, -ellipse.rotation);
					var new_position = rotatePoint(position, new_center, -ellipse.rotation);
					ellipse.x = new_center.x;
					ellipse.y = new_center.y;
					ellipse.radius = Math.max(new_position.x - new_opposite.x, new_position.y - new_opposite.y) / 2;
				};
				return Circle;
			})(elements_element);
			/* harmony default export */ const circle = Circle; // CONCATENATED MODULE: ./components/canvas/elements/ellipse.ts

			var ellipse_extends =
				(undefined && undefined.__extends) ||
				(function () {
					var extendStatics = function (d, b) {
						extendStatics =
							Object.setPrototypeOf ||
							({ __proto__: [] } instanceof Array &&
								function (d, b) {
									d.__proto__ = b;
								}) ||
							function (d, b) {
								for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
							};
						return extendStatics(d, b);
					};
					return function (d, b) {
						if (typeof b !== 'function' && b !== null) throw new TypeError('Class extends value ' + String(b) + ' is not a constructor or null');
						extendStatics(d, b);
						function __() {
							this.constructor = d;
						}
						d.prototype = b === null ? Object.create(b) : ((__.prototype = b.prototype), new __());
					};
				})();
			var ellipse_assign =
				(undefined && undefined.__assign) ||
				function () {
					ellipse_assign =
						Object.assign ||
						function (t) {
							for (var s, i = 1, n = arguments.length; i < n; i++) {
								s = arguments[i];
								for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
							}
							return t;
						};
					return ellipse_assign.apply(this, arguments);
				};

			var Ellipse = /** @class */ (function (_super) {
				ellipse_extends(Ellipse, _super);
				function Ellipse() {
					return (_super !== null && _super.apply(this, arguments)) || this;
				}
				Ellipse.create = function (id, position, selected) {
					return Object.assign(_super.create.call(this, id, position, selected), {
						label: 'Ellipse',
						type: 'ellipse',
						x: position.x,
						y: position.y,
						rotation: 0,
						// start_angle: 0,
						// end_angle: 6.283185307179586,
						points: this.makePoints(position.x, position.y, 1, 1, 0),
					});
				};
				Ellipse.makePoints = function (x, y, width, height, radius) {
					var kappa = 0.5522848; // Constant to define a ellipse with bezier curves
					var middle_y = y + height / 2;
					var middle_x = x + width / 2;
					var control_x = (width / 2) * kappa; // control point offset horizontal
					var control_y = (height / 2) * kappa; // control point offset horizontal
					return [
						{
							x: x + width,
							y: middle_y,
							radius: radius,
							controls: [
								{ x: x + width, y: middle_y + control_y },
								{ x: x + width, y: middle_y - control_y },
							],
						},
						{
							x: middle_x,
							y: y + height,
							radius: radius,
							controls: [
								{ x: middle_x - control_x, y: y + height },
								{ x: middle_x + control_x, y: y + height },
							],
						},
						{
							x: x,
							y: middle_y,
							radius: radius,
							controls: [
								{ x: x, y: middle_y - control_y },
								{ x: x, y: middle_y + control_y },
							],
						},
						{
							x: middle_x,
							y: y,
							radius: radius,
							controls: [
								{ x: middle_x + control_x, y: y },
								{ x: middle_x - control_x, y: y },
							],
						},
					].map(function (point, i) {
						return ellipse_assign(ellipse_assign({}, point), { i: i });
					});
				};
				// TODO: See if we can merge this with rounded poly
				Ellipse.path = function (line) {
					var path = new Path2D();
					path.moveTo(line.points[0].x, line.points[0].y);
					line.points.forEach(function (point, i, points) {
						var next = points[(i + 1) % line.points.length];
						path.bezierCurveTo(point.controls[0].x, point.controls[0].y, next.controls[1].x, next.controls[1].y, next.x, next.y);
					});
					return path;
				};
				return Ellipse;
			})(elements_element);
			/* harmony default export */ const ellipse = Ellipse; // CONCATENATED MODULE: ./components/canvas/elements/group.ts

			var group_extends =
				(undefined && undefined.__extends) ||
				(function () {
					var extendStatics = function (d, b) {
						extendStatics =
							Object.setPrototypeOf ||
							({ __proto__: [] } instanceof Array &&
								function (d, b) {
									d.__proto__ = b;
								}) ||
							function (d, b) {
								for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
							};
						return extendStatics(d, b);
					};
					return function (d, b) {
						if (typeof b !== 'function' && b !== null) throw new TypeError('Class extends value ' + String(b) + ' is not a constructor or null');
						extendStatics(d, b);
						function __() {
							this.constructor = d;
						}
						d.prototype = b === null ? Object.create(b) : ((__.prototype = b.prototype), new __());
					};
				})();

			var Group = /** @class */ (function (_super) {
				group_extends(Group, _super);
				function Group() {
					return (_super !== null && _super.apply(this, arguments)) || this;
				}
				Group.create = function (id, position, selected) {
					return Object.assign(_super.create.call(this, id, position, selected), {
						elements: [],
					});
				};
				Group.draw = function (group, context, cursor, view) {
					var hovering = group.elements
						.filter(function (element) {
							return element.visible;
						})
						.reverse()
						.filter(function (element) {
							return elements_elements[element.type].draw(element, context, cursor, view);
						})
						.filter(function (element) {
							return !element.locked;
						});
					return hovering.length > 0;
				};
				Group.outline = function (group, context, color, line_width) {
					var bounds = this.bound(group);
					var center = this.center(group);
					context.translate(center.x, center.y);
					context.rotate(group.rotation);
					context.strokeStyle = color;
					context.lineWidth = line_width;
					context.beginPath();
					context.rect(-bounds.width / 2, -bounds.height / 2, bounds.width, bounds.height);
					context.stroke();
					context.rotate(-group.rotation);
					context.translate(-center.x, -center.y);
				};
				Group.getFill = function (group) {
					return group.elements
						.map(function (element) {
							return elements_elements[element.type].getFill(element);
						})
						.flat();
				};
				Group.setFill = function (group, colors) {
					group.elements.forEach(function (element) {
						return elements_elements[element.type].setFill(element, colors);
					});
				};
				Group.getStroke = function (group) {
					return group.elements
						.map(function (element) {
							return elements_elements[element.type].getStroke(element);
						})
						.flat();
				};
				Group.setStroke = function (group, colors) {
					group.elements.forEach(function (element) {
						return elements_elements[element.type].setStroke(element, colors);
					});
				};
				Group.getEffect = function (group) {
					return group.elements
						.map(function (element) {
							return elements_elements[element.type].getEffect(element);
						})
						.flat();
				};
				Group.setEffect = function (group, colors) {
					group.elements.forEach(function (element) {
						return elements_elements[element.type].setEffect(element, colors);
					});
				};
				Group.getPoints = function (group) {
					return group.elements
						.map(function (element) {
							return elements_elements[element.type].getPoints(element);
						})
						.flat();
				};
				return Group;
			})(elements_element);
			/* harmony default export */ const group = Group; // CONCATENATED MODULE: ./components/canvas/elements/rectangle.ts

			var rectangle_extends =
				(undefined && undefined.__extends) ||
				(function () {
					var extendStatics = function (d, b) {
						extendStatics =
							Object.setPrototypeOf ||
							({ __proto__: [] } instanceof Array &&
								function (d, b) {
									d.__proto__ = b;
								}) ||
							function (d, b) {
								for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
							};
						return extendStatics(d, b);
					};
					return function (d, b) {
						if (typeof b !== 'function' && b !== null) throw new TypeError('Class extends value ' + String(b) + ' is not a constructor or null');
						extendStatics(d, b);
						function __() {
							this.constructor = d;
						}
						d.prototype = b === null ? Object.create(b) : ((__.prototype = b.prototype), new __());
					};
				})();

			var Rectangle = /** @class */ (function (_super) {
				rectangle_extends(Rectangle, _super);
				function Rectangle() {
					return (_super !== null && _super.apply(this, arguments)) || this;
				}
				Rectangle.create = function (id, position, selected) {
					return Object.assign(_super.create.call(this, id, position, selected), {
						label: 'Rectangle',
						type: 'rectangle',
						selected: true,
						rotation: 0,
						points: this.makePoints(position.x, position.y, 1, 1, 0),
					});
				};
				return Rectangle;
			})(elements_element);
			/* harmony default export */ const rectangle = Rectangle; // CONCATENATED MODULE: ./components/canvas/elements/frame.ts
			// function getClosest(points, position) {
			// 	return points.map((point) => ({ ...point, delta: Math.abs(point.x - position.x) + Math.abs(point.y - position.y) })).sort((point1, point2) => point1.delta + point2.delta)[0];
			// }
			// function average(arr) {
			// 	return arr.reduce((a, b) => a + b, 0) / arr.length;
			// }

			var frame_extends =
				(undefined && undefined.__extends) ||
				(function () {
					var extendStatics = function (d, b) {
						extendStatics =
							Object.setPrototypeOf ||
							({ __proto__: [] } instanceof Array &&
								function (d, b) {
									d.__proto__ = b;
								}) ||
							function (d, b) {
								for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
							};
						return extendStatics(d, b);
					};
					return function (d, b) {
						if (typeof b !== 'function' && b !== null) throw new TypeError('Class extends value ' + String(b) + ' is not a constructor or null');
						extendStatics(d, b);
						function __() {
							this.constructor = d;
						}
						d.prototype = b === null ? Object.create(b) : ((__.prototype = b.prototype), new __());
					};
				})();

			var Frame = /** @class */ (function (_super) {
				frame_extends(Frame, _super);
				function Frame() {
					return (_super !== null && _super.apply(this, arguments)) || this;
				}
				Frame.create = function (id, position, selected) {
					return Object.assign(_super.create.call(this, id, position, selected), {
						label: 'Frame',
						type: 'frame',
						rotation: 0,
						elements: [],
						points: this.makePoints(position.x, position.y, 1, 1, 0),
						fill: [{ id: id + '2123', type: 'Solid', color: [0, 0, 1, 1], format: 'hex4', visible: true }],
					});
				};
				Frame.draw = function (frame, context, cursor, view) {
					var hover = elements_element.draw(frame, context, cursor, view);
					var center = this.center(frame);
					var path = this.path(frame);
					context.save();
					context.clip(path);
					// context.translate(center.x, center.y);
					// context.rotate(frame.rotation);
					frame.elements
						.filter(function (element) {
							return element.visible;
						})
						.reverse()
						.filter(function (element) {
							return elements_elements[element.type].draw(element, context, cursor, view);
						})
						.filter(function (element) {
							return !element.locked;
						});
					context.restore();
					return hover;
				};
				// static draw(frame, context: CanvasRenderingContext2D, cursor, draw) {
				// 	const center = this.center(frame);
				// 	context.fillStyle = frame.color;
				// 	context.translate(center.x, center.y);
				// 	context.rotate(frame.rotation);
				// 	const path = this.path(frame);
				// 	this.fill(frame, context, path);
				// 	this.stroke(frame, context, path);
				// 	const hover = context.isPointInPath(path, cursor.x, cursor.y);
				// 	context.rotate(-frame.rotation);
				// 	context.translate(-center.x, -center.y);
				// 	const hover_child = frame.elements
				// 		.filter((element) => element.visible)
				// 		.reverse()
				// 		.filter((element) => Elements[element.type].draw(element, context, cursor, draw))
				// 		.filter((element) => !element.locked);
				// 	if (hover_child.length > 0) return hover_child.length > 0;
				// 	return hover;
				// }
				Frame.getEffect = function (frame) {
					return frame.elements
						.map(function (element) {
							return elements_elements[element.type].getEffect(element);
						})
						.flat();
				};
				Frame.setEffect = function (frame, colors) {
					frame.elements.forEach(function (element) {
						return elements_elements[element.type].setEffect(element, colors);
					});
				};
				Frame.getPoints = function (frame) {
					return frame.points;
				};
				return Frame;
			})(elements_element);
			/* harmony default export */ const elements_frame = Frame; // CONCATENATED MODULE: ./components/canvas/elements/line.ts

			var line_extends =
				(undefined && undefined.__extends) ||
				(function () {
					var extendStatics = function (d, b) {
						extendStatics =
							Object.setPrototypeOf ||
							({ __proto__: [] } instanceof Array &&
								function (d, b) {
									d.__proto__ = b;
								}) ||
							function (d, b) {
								for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
							};
						return extendStatics(d, b);
					};
					return function (d, b) {
						if (typeof b !== 'function' && b !== null) throw new TypeError('Class extends value ' + String(b) + ' is not a constructor or null');
						extendStatics(d, b);
						function __() {
							this.constructor = d;
						}
						d.prototype = b === null ? Object.create(b) : ((__.prototype = b.prototype), new __());
					};
				})();

			var Line = /** @class */ (function (_super) {
				line_extends(Line, _super);
				function Line() {
					return (_super !== null && _super.apply(this, arguments)) || this;
				}
				Line.create = function (id, position, selected) {
					return Object.assign(_super.create.call(this, id, position, selected), {
						label: 'Line',
						type: 'line',
						fill: [],
						stroke: [{ id: id + '564', type: 'Center', width: 2, color: [0.2, 0.2, 0.2, 1], format: 'hex4', visible: true }],
						points: [
							{ x: position.x, y: position.y, i: 0, controls: [] },
							{ x: position.x, y: position.y, i: 1, controls: [] },
						],
					});
				};
				Line.path = function (line) {
					var path = new Path2D();
					line.points.forEach(function (point) {
						return path.lineTo(point.x, point.y);
					});
					return path;
				};
				Line.draw = function (line, context, cursor, view) {
					var path = this.path(line);
					context.lineWidth = this.stroke(line, context, path);
					return context.isPointInStroke(path, cursor.x, cursor.y);
				};
				Line.highlight = function (line, context, cursor, highlight, line_width, box_size) {
					this.outline(line, context, highlight, line_width);
					var action = undefined;
					if (this.drawBound(line, context, cursor, highlight, line_width)) action = 'stretch';
					if (this.drawRotate(line, context, cursor, box_size)) action = 'rotate';
					if (this.drawResize(line, context, cursor, highlight, line_width, box_size)) action = 'resize';
					return action ? { action: action, element: line } : undefined;
				};
				Line.drawBound = function (element, context, cursor, color, line) {
					return false;
				};
				Line.drawRotate = function (line, context, cursor, box_size) {
					// context.beginPath();
					// const angle = Math.atan2(line.points[0].y - line.points[1].y, line.points[0].x - line.points[1].x);
					// this.boxes(line, box_size * 2).forEach((box) => {
					// 	context.translate(box.x, box.y);
					// 	context.rotate(angle);
					// 	context.rect(-box.width, -box.width, box.width * 2, box.height * 2);
					// 	context.rotate(-angle);
					// 	context.translate(-box.x, -box.y);
					// });
					// context.fill();
					// context.stroke();
					// return context.isPointInPath(cursor.x, cursor.y);
					return false;
				};
				Line.drawResize = function (line, context, cursor, highlight, line_width, box_size) {
					context.fillStyle = 'white';
					context.strokeStyle = highlight;
					context.lineWidth = line_width;
					context.beginPath();
					var angle = Math.atan2(line.points[0].y - line.points[1].y, line.points[0].x - line.points[1].x);
					this.boxes(line, box_size).forEach(function (box) {
						context.translate(box.x, box.y);
						context.rotate(angle);
						context.rect(-box.width, -box.width, box.width * 2, box.height * 2);
						context.rotate(-angle);
						context.translate(-box.x, -box.y);
					});
					context.fill();
					context.stroke();
					return context.isPointInPath(cursor.x, cursor.y);
				};
				Line.center = function (line) {
					return {
						x: line.points[0].x + (line.points[0].x + line.points[1].x) / 2,
						y: line.points[0].y + (line.points[0].y + line.points[1].y) / 2,
					};
				};
				Line.bound = function (line) {
					var x = Math.min(line.points[0].x, line.points[1].x);
					var y = Math.min(line.points[0].y, line.points[1].y);
					return {
						x: x,
						y: y,
						width: Math.max(line.points[0].x, line.points[1].x) - x,
						height: Math.max(line.points[0].y, line.points[1].y) - y,
					};
				};
				// static move(element, position, last_position) {
				// 	const delta_x = position.x - last_position.x;
				// 	const delta_y = position.y - last_position.y;
				// 	element.x1 += delta_x;
				// 	element.y1 += delta_y;
				// 	element.x2 += delta_x;
				// 	element.y2 += delta_y;
				// }
				Line.resize = function (line, position, last_position) {
					if (closestPoint(line, last_position)) {
						line.points[0].x = Math.round(position.x);
						line.points[0].y = Math.round(position.y);
					} else {
						line.points[1].x = Math.round(position.x);
						line.points[1].y = Math.round(position.y);
					}
				};
				Line.rotate = function (line, position, last_position) {
					// const center = this.center(line);
					// const rotation = Math.atan2(center.y - position.y, center.x - position.x) - Math.atan2(center.y - last_position.y, center.x - last_position.x);
					// console.log('Broken');
					// this.resize(line, position, last_position);
					// const opposite = {
					// 	x: center.x - (last_position.x - center.x),
					// 	y: center.y - (position.y - center.y),
					// };
					// // const new_center = {
					// // 	x: (opposite.x + position.x) / 2,
					// // 	y: (opposite.y + position.y) / 2,
					// // };
					// const new_opposite = rotatePoint({ x: line.points[0].x, y: line.points[0].y }, center, -rotation);
					// const new_position = rotatePoint({ x: line.points[1].x, y: line.points[1].y }, center, -rotation);
					// line.points[0].x = new_opposite.x;
					// line.points[0].y = new_opposite.y;
					// line.points[1].x = new_position.x;
					// line.points[1].y = new_position.y;
					return 0;
				};
				Line.stretch = function (line, position, last_position) {};
				Line.points = function (line) {
					return [
						{
							x: line.points[0].x,
							y: line.points[0].y,
						},
						{
							x: line.points[1].x,
							y: line.points[1].y,
						},
					];
				};
				Line.boxes = function (line, box_size) {
					return line.points.map(function (point) {
						return {
							id: line.id,
							x: point.x,
							y: point.y,
							width: box_size,
							height: box_size,
						};
					});
				};
				return Line;
			})(elements_element);
			/* harmony default export */ const line = Line;
			function closestPoint(line, position) {
				return Math.pow(line.points[0].x - position.x, 2) + Math.pow(line.points[0].y - position.y, 2) < Math.pow(line.points[1].x - position.x, 2) + Math.pow(line.points[1].y - position.y, 2);
			} // CONCATENATED MODULE: ./components/canvas/elements/arrow.ts

			var arrow_extends =
				(undefined && undefined.__extends) ||
				(function () {
					var extendStatics = function (d, b) {
						extendStatics =
							Object.setPrototypeOf ||
							({ __proto__: [] } instanceof Array &&
								function (d, b) {
									d.__proto__ = b;
								}) ||
							function (d, b) {
								for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
							};
						return extendStatics(d, b);
					};
					return function (d, b) {
						if (typeof b !== 'function' && b !== null) throw new TypeError('Class extends value ' + String(b) + ' is not a constructor or null');
						extendStatics(d, b);
						function __() {
							this.constructor = d;
						}
						d.prototype = b === null ? Object.create(b) : ((__.prototype = b.prototype), new __());
					};
				})();

			var Arrow = /** @class */ (function (_super) {
				arrow_extends(Arrow, _super);
				function Arrow() {
					return (_super !== null && _super.apply(this, arguments)) || this;
				}
				Arrow.create = function (id, position, selected) {
					return Object.assign(_super.create.call(this, id, position, selected), {
						label: 'Arrow',
						type: 'arrow',
					});
				};
				Arrow.draw = function (arrow, context, cursor, view) {
					var theta = Math.atan2(arrow.y2 - arrow.y1, arrow.x2 - arrow.x1);
					var path = new Path2D();
					path.moveTo(arrow.x1, arrow.y1);
					path.lineTo(arrow.x2 - arrow.head_length * Math.cos(theta) * Math.cos(arrow.head_angle), arrow.y2 - arrow.head_length * Math.sin(theta) * Math.cos(arrow.head_angle));
					context.stroke(path);
					path.moveTo(arrow.x2, arrow.y2);
					path.lineTo(arrow.x2 - arrow.head_length * Math.cos(theta - arrow.head_angle), arrow.y2 - arrow.head_length * Math.sin(theta - arrow.head_angle));
					path.lineTo(arrow.x2 - arrow.head_length * Math.cos(theta + arrow.head_angle), arrow.y2 - arrow.head_length * Math.sin(theta + arrow.head_angle));
					context.fill(path);
					return context.isPointInPath(path, cursor.x, cursor.y);
				};
				Arrow.outarrow = function (arrow, context, color, arrow_width) {
					context.strokeStyle = color;
					context.arrowWidth = arrow_width;
					var theta = Math.atan2(arrow.y2 - arrow.y1, arrow.x2 - arrow.x1);
					context.beginPath();
					context.moveTo(arrow.x1, arrow.y1);
					context.lineTo(arrow.x2 - arrow.head_length * Math.cos(theta) * Math.cos(arrow.head_angle), arrow.y2 - arrow.head_length * Math.sin(theta) * Math.cos(arrow.head_angle));
					context.stroke();
					context.moveTo(arrow.x2, arrow.y2);
					context.lineTo(arrow.x2 - arrow.head_length * Math.cos(theta - arrow.head_angle), arrow.y2 - arrow.head_length * Math.sin(theta - arrow.head_angle));
					context.lineTo(arrow.x2 - arrow.head_length * Math.cos(theta + arrow.head_angle), arrow.y2 - arrow.head_length * Math.sin(theta + arrow.head_angle));
					context.fill();
				};
				Arrow.resize = function (arrow, position, last_position) {};
				Arrow.stretch = function (arrow, position, last_position) {};
				return Arrow;
			})(line);
			/* harmony default export */ const arrow = Arrow; // CONCATENATED MODULE: ./components/canvas/elements/spline.ts

			var spline_extends =
				(undefined && undefined.__extends) ||
				(function () {
					var extendStatics = function (d, b) {
						extendStatics =
							Object.setPrototypeOf ||
							({ __proto__: [] } instanceof Array &&
								function (d, b) {
									d.__proto__ = b;
								}) ||
							function (d, b) {
								for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
							};
						return extendStatics(d, b);
					};
					return function (d, b) {
						if (typeof b !== 'function' && b !== null) throw new TypeError('Class extends value ' + String(b) + ' is not a constructor or null');
						extendStatics(d, b);
						function __() {
							this.constructor = d;
						}
						d.prototype = b === null ? Object.create(b) : ((__.prototype = b.prototype), new __());
					};
				})();
			var spline_read =
				(undefined && undefined.__read) ||
				function (o, n) {
					var m = typeof Symbol === 'function' && o[Symbol.iterator];
					if (!m) return o;
					var i = m.call(o),
						r,
						ar = [],
						e;
					try {
						while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
					} catch (error) {
						e = { error: error };
					} finally {
						try {
							if (r && !r.done && (m = i['return'])) m.call(i);
						} finally {
							if (e) throw e.error;
						}
					}
					return ar;
				};
			var spline_spreadArray =
				(undefined && undefined.__spreadArray) ||
				function (to, from, pack) {
					if (pack || arguments.length === 2)
						for (var i = 0, l = from.length, ar; i < l; i++) {
							if (ar || !(i in from)) {
								if (!ar) ar = Array.prototype.slice.call(from, 0, i);
								ar[i] = from[i];
							}
						}
					return to.concat(ar || Array.prototype.slice.call(from));
				};

			var Bezier = /** @class */ (function (_super) {
				spline_extends(Bezier, _super);
				function Bezier() {
					return (_super !== null && _super.apply(this, arguments)) || this;
				}
				Bezier.create = function (id, position, selected) {
					return Object.assign(_super.create.call(this, id, position, selected), {
						curves: [
							{
								x1: position.x - 1,
								y1: position.y - 1,
								x1cp: position.x,
								y1cp: position.y,
								x2: position.x + 20,
								y2: position.y + 20,
								x2cp: position.x,
								y2cp: position.y - 10,
							},
							{
								x1: position.x + 20,
								y1: position.y + 20,
								x1cp: position.x + 10 + 20,
								y1cp: position.y + 20,
								x2: position.x + 40,
								y2: position.y + 40,
								x2cp: position.x + 20,
								y2cp: position.y - 10 + 20,
							},
							{
								x1: position.x + 40,
								y1: position.y + 20,
								x1cp: position.x + 140 + 20,
								y1cp: position.y + 20,
								x2: position.x + 80,
								y2: position.y + 40,
								x2cp: position.x + 80,
								y2cp: position.y - 10 + 20,
							},
						],
						label: 'Spline',
						type: 'spline',
						fill: [],
						stroke: [{ id: id + '564', type: 'Center', width: 1, color: [0.2, 0.2, 0.2, 1], format: 'hex4', visible: true }],
					});
				};
				Bezier.points = function (line) {
					return line.curves
						.map(function (point) {
							return [
								{
									x: point.x1,
									y: point.y1,
								},
								{
									x: point.x2,
									y: point.y2,
								},
							];
						})
						.flat();
				};
				Bezier.path = function (line) {
					var path = new Path2D();
					var last_curve = { x2: undefined, y2: undefined };
					line.curves.forEach(function (curve) {
						if (!curve.x2) return;
						if (last_curve.x2 !== curve.x1 || last_curve.y2 !== curve.y1) path.moveTo(curve.x1, curve.y1);
						path.bezierCurveTo(curve.x1cp, curve.y1cp, curve.x2cp, curve.y2cp, curve.x2, curve.y2);
						last_curve = curve;
					});
					return path;
				};
				Bezier.outline = function (line, context, color, line_width) {
					context.strokeStyle = color;
					context.lineWidth = line_width;
					var path = this.path(line);
					context.stroke(path);
				};
				Bezier.drawBound = function (line, context, cursor, color, line_width) {
					context.strokeStyle = color;
					context.lineWidth = line_width;
					context.beginPath();
					line.curves.forEach(function (point) {
						context.moveTo(point.x1, point.y1);
						context.lineTo(point.x1cp, point.y1cp);
						context.moveTo(point.x2, point.y2);
						context.lineTo(point.x2cp, point.y2cp);
					});
					context.stroke();
					return false;
				};
				Bezier.drawRotate = function (line, context, cursor, box_size) {
					return false;
				};
				Bezier.drawResize = function (line, context, cursor, highlight, line_width, box_size) {
					context.fillStyle = 'white';
					context.strokeStyle = highlight;
					context.lineWidth = line_width;
					context.beginPath();
					var angle = 0;
					this.boxes(line, box_size).forEach(function (square) {
						context.translate(square.x, square.y);
						context.rotate(angle);
						context.rect(-square.width, -square.width, square.width * 2, square.height * 2);
						context.rotate(-angle);
						context.translate(-square.x, -square.y);
					});
					context.fill();
					context.stroke();
					return context.isPointInPath(cursor.x, cursor.y);
				};
				Bezier.bound = function (line) {
					var xs = line.curves.map(function (point) {
						return point.x;
					});
					var ys = line.curves.map(function (point) {
						return point.y;
					});
					var min_x = Math.min.apply(Math, spline_spreadArray([], spline_read(xs), false));
					var min_y = Math.min.apply(Math, spline_spreadArray([], spline_read(ys), false));
					var max_x = Math.max.apply(Math, spline_spreadArray([], spline_read(xs), false));
					var max_y = Math.max.apply(Math, spline_spreadArray([], spline_read(ys), false));
					return {
						x: min_x,
						y: min_y,
						width: max_x - min_x,
						height: max_y - min_y,
					};
				};
				Bezier.move = function (line, position, last_position) {
					var delta_x = position.x - last_position.x;
					var delta_y = position.y - last_position.y;
					line.curves.forEach(function (point) {
						point.x1 += delta_x;
						point.y1 += delta_y;
						point.x1cp += delta_x;
						point.y1cp += delta_y;
						point.y2 += delta_y;
						point.x2 += delta_x;
						point.x2cp += delta_x;
						point.y2cp += delta_y;
					});
				};
				Bezier.resize = function (line, position, last_position) {
					var closest_curve = this.closestCurve(line, last_position);
					closest_curve.forEach(function (curve) {
						var target = line.curves[curve.index];
						var delta_x = Math.round(position.x) - target['x' + curve.point];
						var delta_y = Math.round(position.y) - target['y' + curve.point];
						target['x' + curve.point] = Math.round(position.x);
						target['y' + curve.point] = Math.round(position.y);
						if (curve.point === '1') {
							target.x1cp += delta_x;
							target.y1cp += delta_y;
						} else if (curve.point === '2') {
							target.x2cp += delta_x;
							target.y2cp += delta_y;
						} else if (curve.point === '1cp') {
							var prev_index = curve.index - 1;
							if (prev_index === -1) prev_index = line.curves.length - 1;
							if (line.curves[curve.index].x1 !== line.curves[prev_index].x2 || line.curves[curve.index].y1 !== line.curves[prev_index].y2) return;
							var prev_curve = line.curves[prev_index];
							prev_curve.x2cp = prev_curve.x2 - (target.x1cp - prev_curve.x2);
							prev_curve.y2cp = prev_curve.y2 - (target.y1cp - prev_curve.y2);
						} else if (curve.point === '2cp') {
							var next_index = curve.index + 1;
							if (next_index === line.curves.length) next_index = 0;
							if (line.curves[curve.index].x2 !== line.curves[next_index].x1 || line.curves[curve.index].y2 !== line.curves[next_index].y1) return;
							var next_curve = line.curves[next_index];
							next_curve.x1cp = next_curve.x1 - (target.x2cp - next_curve.x1);
							next_curve.y1cp = next_curve.y1 - (target.y2cp - next_curve.y1);
						}
					});
				};
				Bezier.closestCurve = function (line, position) {
					var points = this.boxes(line, 0)
						.reverse()
						.map(function (point) {
							point.distance = Math.pow(point.x - position.x, 2) + Math.pow(point.y - position.y, 2);
							return point;
						});
					var min_distance = Math.min.apply(
						Math,
						spline_spreadArray(
							[],
							spline_read(
								points.map(function (point) {
									return point.distance;
								})
							),
							false
						)
					);
					var closetest_points = points.filter(function (points) {
						return points.distance === min_distance;
					});
					// Only allow 1 point per curve
					var curves = new Map(
						closetest_points.map(function (point) {
							return [point.index, point];
						})
					).values();
					return spline_spreadArray([], spline_read(curves), false);
				};
				Bezier.rotate = function (line, position, last_position) {
					return 0;
				};
				Bezier.stretch = function (line, position, last_position) {};
				Bezier.boxes = function (line, box_size) {
					return line.curves
						.map(function (point, i) {
							return [
								{
									point: '1',
									index: i,
									id: line.id,
									x: point.x1,
									y: point.y1,
									width: box_size,
									height: box_size,
								},
								{
									point: '1cp',
									index: i,
									id: line.id,
									x: point.x1cp,
									y: point.y1cp,
									width: box_size,
									height: box_size,
								},
								{
									point: '2',
									index: i,
									id: line.id,
									x: point.x2,
									y: point.y2,
									width: box_size,
									height: box_size,
								},
								{
									point: '2cp',
									index: i,
									id: line.id,
									x: point.x2cp,
									y: point.y2cp,
									width: box_size,
									height: box_size,
								},
							];
						})
						.flat();
				};
				return Bezier;
			})(elements_element);
			/* harmony default export */ const spline = Bezier; // CONCATENATED MODULE: ./components/canvas/elements/text.ts

			var text_extends =
				(undefined && undefined.__extends) ||
				(function () {
					var extendStatics = function (d, b) {
						extendStatics =
							Object.setPrototypeOf ||
							({ __proto__: [] } instanceof Array &&
								function (d, b) {
									d.__proto__ = b;
								}) ||
							function (d, b) {
								for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
							};
						return extendStatics(d, b);
					};
					return function (d, b) {
						if (typeof b !== 'function' && b !== null) throw new TypeError('Class extends value ' + String(b) + ' is not a constructor or null');
						extendStatics(d, b);
						function __() {
							this.constructor = d;
						}
						d.prototype = b === null ? Object.create(b) : ((__.prototype = b.prototype), new __());
					};
				})();
			var text_read =
				(undefined && undefined.__read) ||
				function (o, n) {
					var m = typeof Symbol === 'function' && o[Symbol.iterator];
					if (!m) return o;
					var i = m.call(o),
						r,
						ar = [],
						e;
					try {
						while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
					} catch (error) {
						e = { error: error };
					} finally {
						try {
							if (r && !r.done && (m = i['return'])) m.call(i);
						} finally {
							if (e) throw e.error;
						}
					}
					return ar;
				};
			var text_spreadArray =
				(undefined && undefined.__spreadArray) ||
				function (to, from, pack) {
					if (pack || arguments.length === 2)
						for (var i = 0, l = from.length, ar; i < l; i++) {
							if (ar || !(i in from)) {
								if (!ar) ar = Array.prototype.slice.call(from, 0, i);
								ar[i] = from[i];
							}
						}
					return to.concat(ar || Array.prototype.slice.call(from));
				};

			var Text = /** @class */ (function (_super) {
				text_extends(Text, _super);
				function Text() {
					return (_super !== null && _super.apply(this, arguments)) || this;
				}
				Text.create = function (id, position, selected) {
					return Object.assign(_super.create.call(this, id, position, selected), {
						editing: true,
						label: 'Text',
						type: 'text',
						text: '',
						style: 'normal',
						weight: 'normal',
						family: 'Arial',
						justify: 'left',
						align: 'start',
						size: 10,
						rotation: 0,
						line_height: 1,
						points: this.makePoints(position.x, position.y, 1, 1, 0),
						fill: [{ id: id + '123321', type: 'Text', color: [0, 0, 0, 1], format: 'hex4', visible: true }],
					});
				};
				Text.setFont = function (element, context) {
					context.font = element.style + ' normal ' + element.weight + ' ' + Math.abs(element.size) + 'px ' + element.family.toLowerCase();
				};
				Text.fill = function (element, context, path) {
					var bounds = this.bound(element);
					this.setFont(element, context);
					// Split up text into many lines
					var lines = breakText(element, context, bounds.width);
					var offsets = calculateOffsets(element, context, bounds.width, bounds.height, lines);
					element.fill
						.filter(function (fill) {
							return fill.visible;
						})
						.forEach(function (fill) {
							context.fillStyle = element.text === '' ? 'grey' : colors.toString(fill.color);
							lines.forEach(function (line, i) {
								return context.fillText(line, offsets[i].x, offsets[i].y);
							});
						});
				};
				Text.stroke = function (element, context, path) {
					var bounds = this.bound(element);
					this.setFont(element, context);
					// Split up text into many lines
					var lines = breakText(element, context, bounds.width);
					var offsets = calculateOffsets(element, context, bounds.width, bounds.height, lines);
					return Math.max.apply(
						Math,
						text_spreadArray(
							[],
							text_read(
								element.stroke
									.filter(function (stroke) {
										return stroke.visible;
									})
									.map(function (stroke) {
										if (stroke.width === 0) return 0;
										context.lineWidth = stroke.width;
										context.strokeStyle = colors.toString(stroke.color);
										// Inside, Center and Outsize
										lines.forEach(function (line, i) {
											return context.strokeText(line, offsets[i].x, offsets[i].y);
										});
										return stroke.width;
									})
							),
							false
						)
					);
				};
				Text.effect = function (element, context, path, before, view) {
					var bounds = this.bound(element);
					var lines = breakText(element, context, bounds.width);
					var offsets = calculateOffsets(element, context, bounds.width, bounds.height, lines);
					this.setFont(element, context);
					element.effect
						.filter(function (effect) {
							return effect.visible;
						})
						.forEach(function (effect) {
							context.save();
							context.filter = 'blur(' + Math.round(effect.blur * 0.1 * view.scale) + 'px)';
							context.fillStyle = colors.toString(effect.color);
							context.translate(effect.x, effect.y);
							context.scale(Math.exp(effect.spread * 0.005), Math.exp(effect.spread * 0.005));
							lines.forEach(function (line, i) {
								return context.fillText(line, offsets[i].x, offsets[i].y);
							});
							context.filter = 'none';
							context.restore();
						});
				};
				Text.draw = function (text, context, cursor, view) {
					// if (text.editing) return false;
					var center = this.center(text);
					var path = this.path(text);
					context.fillStyle = text.color;
					context.save();
					context.translate(center.x, center.y);
					context.rotate(text.rotation);
					this.effect(text, context, path, true, view);
					this.stroke(text, context, path);
					this.fill(text, context, path);
					context.restore();
					return context.isPointInPath(path, cursor.x, cursor.y);
				};
				Text.drawPoints = function (element, context, cursor, color, line, box_size) {
					return undefined;
				};
				return Text;
			})(elements_element);
			/* harmony default export */ const elements_text = Text;
			function breakText(element, context, width) {
				// Add placeholder Text...
				if (element.text === '') return ['Text...'];
				// Add space to create extra line for trailing new line character
				var last_line = element.text.endsWith('\n') ? ' ' : '';
				return (
					(element.text + last_line)
						.split('\n')
						.map(function (line) {
							// Add line breaks between words where overflowing
							return breakLine(
								line.split(' ').map(function (word, i, words) {
									return { value: word, width: context.measureText(word + (i !== words.length - 1 ? ' ' : '')).width };
								}),
								Math.abs(width),
								' '
							);
						})
						.flat()
						// Add line breaks between characters where overflowing
						.map(function (line) {
							return context.measureText(line).width > Math.abs(width)
								? breakLine(
										line.split('').map(function (character) {
											return { value: character, width: context.measureText(character).width };
										}),
										Math.abs(width),
										''
								  )
								: line;
						})
						.flat()
				);
			}
			function breakLine(words, max_width, delim) {
				var line_width = 0;
				return words.reduce(
					function (lines, word) {
						if (line_width + word.width > max_width && lines[0].length) {
							lines.push('');
							line_width = 0;
						}
						lines[lines.length - 1] += word.value + delim;
						line_width += word.width;
						return lines;
					},
					['']
				);
			}
			function calculateOffsets(element, context, width, height, lines) {
				return lines.map(function (line, i) {
					return {
						x: xOffset(element, context, line, width),
						y: yOffset(element, lines, i, height),
					};
				});
			}
			function xOffset(element, context, line, width) {
				if (element.justify === 'left') return -Math.abs(width) / 2;
				if (element.justify === 'center') return -context.measureText(line).width / 2 + 1.4;
				if (element.justify === 'right') return Math.abs(width) / 2 - context.measureText(line).width + 3;
			}
			function yOffset(element, lines, i, height) {
				if (element.align === 'start') return -Math.abs(height) / 2 + (i + 1) * Math.abs(element.size) * element.line_height - 2;
				if (element.align === 'center') return (i + 1 - lines.length / 2) * Math.abs(element.size) * element.line_height - 2;
				if (element.align === 'end') return Math.abs(height) / 2 - element.size / 2 + (i + 1 - lines.length) * Math.abs(element.size) * element.line_height + 3;
			} // CONCATENATED MODULE: ./components/canvas/elements/elements.ts

			var Elements = {
				circle: circle,
				ellipse: ellipse,
				group: group,
				rectangle: rectangle,
				frame: elements_frame,
				line: line,
				arrow: arrow,
				spline: spline,
				text: elements_text,
			};
			/* harmony default export */ const elements_elements = Elements;
			function flatten(elements) {
				return elements.reduce(function (all, element) {
					return all.concat(element.type === 'group' || element.type === 'frame' ? flatten(element.elements) : [], [element]);
				}, []);
			}
			function forEachElement(elements, callback) {
				elements.forEach(function (element, index, array) {
					callback(element, index, array);
					if (element.type === 'group' || element.type === 'frame') {
						forEachElement(element.elements, callback);
					}
				});
			}
			function selected(elements, selected_ids) {
				return flatten(elements).filter(function (element) {
					return selected_ids.includes(element.id);
				});
			} // CONCATENATED MODULE: ./node_modules/reselect/es/index.js

			function defaultEqualityCheck(a, b) {
				return a === b;
			}

			function areArgumentsShallowlyEqual(equalityCheck, prev, next) {
				if (prev === null || next === null || prev.length !== next.length) {
					return false;
				}

				// Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.
				var length = prev.length;
				for (var i = 0; i < length; i++) {
					if (!equalityCheck(prev[i], next[i])) {
						return false;
					}
				}

				return true;
			}

			function defaultMemoize(func) {
				var equalityCheck = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultEqualityCheck;

				var lastArgs = null;
				var lastResult = null;
				// we reference arguments instead of spreading them for performance reasons
				return function () {
					if (!areArgumentsShallowlyEqual(equalityCheck, lastArgs, arguments)) {
						// apply arguments instead of spreading for performance.
						lastResult = func.apply(null, arguments);
					}

					lastArgs = arguments;
					return lastResult;
				};
			}

			function getDependencies(funcs) {
				var dependencies = Array.isArray(funcs[0]) ? funcs[0] : funcs;

				if (
					!dependencies.every(function (dep) {
						return typeof dep === 'function';
					})
				) {
					var dependencyTypes = dependencies
						.map(function (dep) {
							return typeof dep;
						})
						.join(', ');
					throw new Error('Selector creators expect all input-selectors to be functions, ' + ('instead received the following types: [' + dependencyTypes + ']'));
				}

				return dependencies;
			}

			function createSelectorCreator(memoize) {
				for (var _len = arguments.length, memoizeOptions = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
					memoizeOptions[_key - 1] = arguments[_key];
				}

				return function () {
					for (var _len2 = arguments.length, funcs = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
						funcs[_key2] = arguments[_key2];
					}

					var recomputations = 0;
					var resultFunc = funcs.pop();
					var dependencies = getDependencies(funcs);

					var memoizedResultFunc = memoize.apply(
						undefined,
						[
							function () {
								recomputations++;
								// apply arguments instead of spreading for performance.
								return resultFunc.apply(null, arguments);
							},
						].concat(memoizeOptions)
					);

					// If a selector is called with the exact same arguments we don't need to traverse our dependencies again.
					var selector = memoize(function () {
						var params = [];
						var length = dependencies.length;

						for (var i = 0; i < length; i++) {
							// apply arguments instead of spreading and mutate a local list of params for performance.
							params.push(dependencies[i].apply(null, arguments));
						}

						// apply arguments instead of spreading for performance.
						return memoizedResultFunc.apply(null, params);
					});

					selector.resultFunc = resultFunc;
					selector.dependencies = dependencies;
					selector.recomputations = function () {
						return recomputations;
					};
					selector.resetRecomputations = function () {
						return (recomputations = 0);
					};
					return selector;
				};
			}

			var es_createSelector = createSelectorCreator(defaultMemoize);

			function createStructuredSelector(selectors) {
				var selectorCreator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : es_createSelector;

				if (typeof selectors !== 'object') {
					throw new Error('createStructuredSelector expects first argument to be an object ' + ('where each property is a selector, instead received a ' + typeof selectors));
				}
				var objectKeys = Object.keys(selectors);
				return selectorCreator(
					objectKeys.map(function (key) {
						return selectors[key];
					}),
					function () {
						for (var _len3 = arguments.length, values = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
							values[_key3] = arguments[_key3];
						}

						return values.reduce(function (composition, value, index) {
							composition[objectKeys[index]] = value;
							return composition;
						}, {});
					}
				);
			} // CONCATENATED MODULE: ./node_modules/@reduxjs/toolkit/node_modules/redux/es/redux.js
			/**
			 * Adapted from React: https://github.com/facebook/react/blob/master/packages/shared/formatProdErrorMessage.js
			 *
			 * Do not require this module directly! Use normal throw error calls. These messages will be replaced with error codes
			 * during build.
			 * @param {number} code
			 */
			function formatProdErrorMessage(code) {
				return 'Minified Redux error #' + code + '; visit https://redux.js.org/Errors?code=' + code + ' for the full message or ' + 'use the non-minified dev environment for full errors. ';
			}

			// Inlined version of the `symbol-observable` polyfill
			var $$observable = (function () {
				return (typeof Symbol === 'function' && Symbol.observable) || '@@observable';
			})();

			/**
			 * These are private action types reserved by Redux.
			 * For any unknown actions, you must return the current state.
			 * If the current state is undefined, you must return the initial state.
			 * Do not reference these action types directly in your code.
			 */
			var randomString = function randomString() {
				return Math.random().toString(36).substring(7).split('').join('.');
			};

			var ActionTypes = {
				INIT: '@@redux/INIT' + randomString(),
				REPLACE: '@@redux/REPLACE' + randomString(),
				PROBE_UNKNOWN_ACTION: function PROBE_UNKNOWN_ACTION() {
					return '@@redux/PROBE_UNKNOWN_ACTION' + randomString();
				},
			};

			/**
			 * @param {any} obj The object to inspect.
			 * @returns {boolean} True if the argument appears to be a plain object.
			 */
			function isPlainObject(obj) {
				if (typeof obj !== 'object' || obj === null) return false;
				var proto = obj;

				while (Object.getPrototypeOf(proto) !== null) {
					proto = Object.getPrototypeOf(proto);
				}

				return Object.getPrototypeOf(obj) === proto;
			}

			function kindOf(val) {
				var typeOfVal = typeof val;

				if (false) {
				}

				return typeOfVal;
			}

			/**
			 * Creates a Redux store that holds the state tree.
			 * The only way to change the data in the store is to call `dispatch()` on it.
			 *
			 * There should only be a single store in your app. To specify how different
			 * parts of the state tree respond to actions, you may combine several reducers
			 * into a single reducer function by using `combineReducers`.
			 *
			 * @param {Function} reducer A function that returns the next state tree, given
			 * the current state tree and the action to handle.
			 *
			 * @param {any} [preloadedState] The initial state. You may optionally specify it
			 * to hydrate the state from the server in universal apps, or to restore a
			 * previously serialized user session.
			 * If you use `combineReducers` to produce the root reducer function, this must be
			 * an object with the same shape as `combineReducers` keys.
			 *
			 * @param {Function} [enhancer] The store enhancer. You may optionally specify it
			 * to enhance the store with third-party capabilities such as middleware,
			 * time travel, persistence, etc. The only store enhancer that ships with Redux
			 * is `applyMiddleware()`.
			 *
			 * @returns {Store} A Redux store that lets you read the state, dispatch actions
			 * and subscribe to changes.
			 */

			function redux_createStore(reducer, preloadedState, enhancer) {
				var _ref2;

				if ((typeof preloadedState === 'function' && typeof enhancer === 'function') || (typeof enhancer === 'function' && typeof arguments[3] === 'function')) {
					throw new Error(true ? formatProdErrorMessage(0) : 0);
				}

				if (typeof preloadedState === 'function' && typeof enhancer === 'undefined') {
					enhancer = preloadedState;
					preloadedState = undefined;
				}

				if (typeof enhancer !== 'undefined') {
					if (typeof enhancer !== 'function') {
						throw new Error(true ? formatProdErrorMessage(1) : 0);
					}

					return enhancer(redux_createStore)(reducer, preloadedState);
				}

				if (typeof reducer !== 'function') {
					throw new Error(true ? formatProdErrorMessage(2) : 0);
				}

				var currentReducer = reducer;
				var currentState = preloadedState;
				var currentListeners = [];
				var nextListeners = currentListeners;
				var isDispatching = false;
				/**
				 * This makes a shallow copy of currentListeners so we can use
				 * nextListeners as a temporary list while dispatching.
				 *
				 * This prevents any bugs around consumers calling
				 * subscribe/unsubscribe in the middle of a dispatch.
				 */

				function ensureCanMutateNextListeners() {
					if (nextListeners === currentListeners) {
						nextListeners = currentListeners.slice();
					}
				}
				/**
				 * Reads the state tree managed by the store.
				 *
				 * @returns {any} The current state tree of your application.
				 */

				function getState() {
					if (isDispatching) {
						throw new Error(true ? formatProdErrorMessage(3) : 0);
					}

					return currentState;
				}
				/**
				 * Adds a change listener. It will be called any time an action is dispatched,
				 * and some part of the state tree may potentially have changed. You may then
				 * call `getState()` to read the current state tree inside the callback.
				 *
				 * You may call `dispatch()` from a change listener, with the following
				 * caveats:
				 *
				 * 1. The subscriptions are snapshotted just before every `dispatch()` call.
				 * If you subscribe or unsubscribe while the listeners are being invoked, this
				 * will not have any effect on the `dispatch()` that is currently in progress.
				 * However, the next `dispatch()` call, whether nested or not, will use a more
				 * recent snapshot of the subscription list.
				 *
				 * 2. The listener should not expect to see all state changes, as the state
				 * might have been updated multiple times during a nested `dispatch()` before
				 * the listener is called. It is, however, guaranteed that all subscribers
				 * registered before the `dispatch()` started will be called with the latest
				 * state by the time it exits.
				 *
				 * @param {Function} listener A callback to be invoked on every dispatch.
				 * @returns {Function} A function to remove this change listener.
				 */

				function subscribe(listener) {
					if (typeof listener !== 'function') {
						throw new Error(true ? formatProdErrorMessage(4) : 0);
					}

					if (isDispatching) {
						throw new Error(true ? formatProdErrorMessage(5) : 0);
					}

					var isSubscribed = true;
					ensureCanMutateNextListeners();
					nextListeners.push(listener);
					return function unsubscribe() {
						if (!isSubscribed) {
							return;
						}

						if (isDispatching) {
							throw new Error(true ? formatProdErrorMessage(6) : 0);
						}

						isSubscribed = false;
						ensureCanMutateNextListeners();
						var index = nextListeners.indexOf(listener);
						nextListeners.splice(index, 1);
						currentListeners = null;
					};
				}
				/**
				 * Dispatches an action. It is the only way to trigger a state change.
				 *
				 * The `reducer` function, used to create the store, will be called with the
				 * current state tree and the given `action`. Its return value will
				 * be considered the **next** state of the tree, and the change listeners
				 * will be notified.
				 *
				 * The base implementation only supports plain object actions. If you want to
				 * dispatch a Promise, an Observable, a thunk, or something else, you need to
				 * wrap your store creating function into the corresponding middleware. For
				 * example, see the documentation for the `redux-thunk` package. Even the
				 * middleware will eventually dispatch plain object actions using this method.
				 *
				 * @param {Object} action A plain object representing “what changed”. It is
				 * a good idea to keep actions serializable so you can record and replay user
				 * sessions, or use the time travelling `redux-devtools`. An action must have
				 * a `type` property which may not be `undefined`. It is a good idea to use
				 * string constants for action types.
				 *
				 * @returns {Object} For convenience, the same action object you dispatched.
				 *
				 * Note that, if you use a custom middleware, it may wrap `dispatch()` to
				 * return something else (for example, a Promise you can await).
				 */

				function dispatch(action) {
					if (!isPlainObject(action)) {
						throw new Error(true ? formatProdErrorMessage(7) : 0);
					}

					if (typeof action.type === 'undefined') {
						throw new Error(true ? formatProdErrorMessage(8) : 0);
					}

					if (isDispatching) {
						throw new Error(true ? formatProdErrorMessage(9) : 0);
					}

					try {
						isDispatching = true;
						currentState = currentReducer(currentState, action);
					} finally {
						isDispatching = false;
					}

					var listeners = (currentListeners = nextListeners);

					for (var i = 0; i < listeners.length; i++) {
						var listener = listeners[i];
						listener();
					}

					return action;
				}
				/**
				 * Replaces the reducer currently used by the store to calculate the state.
				 *
				 * You might need this if your app implements code splitting and you want to
				 * load some of the reducers dynamically. You might also need this if you
				 * implement a hot reloading mechanism for Redux.
				 *
				 * @param {Function} nextReducer The reducer for the store to use instead.
				 * @returns {void}
				 */

				function replaceReducer(nextReducer) {
					if (typeof nextReducer !== 'function') {
						throw new Error(true ? formatProdErrorMessage(10) : 0);
					}

					currentReducer = nextReducer; // This action has a similiar effect to ActionTypes.INIT.
					// Any reducers that existed in both the new and old rootReducer
					// will receive the previous state. This effectively populates
					// the new state tree with any relevant data from the old one.

					dispatch({
						type: ActionTypes.REPLACE,
					});
				}
				/**
				 * Interoperability point for observable/reactive libraries.
				 * @returns {observable} A minimal observable of state changes.
				 * For more information, see the observable proposal:
				 * https://github.com/tc39/proposal-observable
				 */

				function observable() {
					var _ref;

					var outerSubscribe = subscribe;
					return (
						(_ref = {
							/**
							 * The minimal observable subscription method.
							 * @param {Object} observer Any object that can be used as an observer.
							 * The observer object should have a `next` method.
							 * @returns {subscription} An object with an `unsubscribe` method that can
							 * be used to unsubscribe the observable from the store, and prevent further
							 * emission of values from the observable.
							 */
							subscribe: function subscribe(observer) {
								if (typeof observer !== 'object' || observer === null) {
									throw new Error(true ? formatProdErrorMessage(11) : 0);
								}

								function observeState() {
									if (observer.next) {
										observer.next(getState());
									}
								}

								observeState();
								var unsubscribe = outerSubscribe(observeState);
								return {
									unsubscribe: unsubscribe,
								};
							},
						}),
						(_ref[$$observable] = function () {
							return this;
						}),
						_ref
					);
				} // When a store is created, an "INIT" action is dispatched so that every
				// reducer returns their initial state. This effectively populates
				// the initial state tree.

				dispatch({
					type: ActionTypes.INIT,
				});
				return (
					(_ref2 = {
						dispatch: dispatch,
						subscribe: subscribe,
						getState: getState,
						replaceReducer: replaceReducer,
					}),
					(_ref2[$$observable] = observable),
					_ref2
				);
			}

			/**
			 * Prints a warning in the console if it exists.
			 *
			 * @param {String} message The warning message.
			 * @returns {void}
			 */
			function warning(message) {
				/* eslint-disable no-console */
				if (typeof console !== 'undefined' && typeof console.error === 'function') {
					console.error(message);
				}
				/* eslint-enable no-console */

				try {
					// This error was thrown as a convenience so that if you enable
					// "break on all exceptions" in your console,
					// it would pause the execution at this line.
					throw new Error(message);
				} catch (e) {} // eslint-disable-line no-empty
			}

			function getUnexpectedStateShapeWarningMessage(inputState, reducers, action, unexpectedKeyCache) {
				var reducerKeys = Object.keys(reducers);
				var argumentName = action && action.type === ActionTypes.INIT ? 'preloadedState argument passed to createStore' : 'previous state received by the reducer';

				if (reducerKeys.length === 0) {
					return 'Store does not have a valid reducer. Make sure the argument passed ' + 'to combineReducers is an object whose values are reducers.';
				}

				if (!isPlainObject(inputState)) {
					return 'The ' + argumentName + ' has unexpected type of "' + kindOf(inputState) + '". Expected argument to be an object with the following ' + ('keys: "' + reducerKeys.join('", "') + '"');
				}

				var unexpectedKeys = Object.keys(inputState).filter(function (key) {
					return !reducers.hasOwnProperty(key) && !unexpectedKeyCache[key];
				});
				unexpectedKeys.forEach(function (key) {
					unexpectedKeyCache[key] = true;
				});
				if (action && action.type === ActionTypes.REPLACE) return;

				if (unexpectedKeys.length > 0) {
					return 'Unexpected ' + (unexpectedKeys.length > 1 ? 'keys' : 'key') + ' ' + ('"' + unexpectedKeys.join('", "') + '" found in ' + argumentName + '. ') + 'Expected to find one of the known reducer keys instead: ' + ('"' + reducerKeys.join('", "') + '". Unexpected keys will be ignored.');
				}
			}

			function assertReducerShape(reducers) {
				Object.keys(reducers).forEach(function (key) {
					var reducer = reducers[key];
					var initialState = reducer(undefined, {
						type: ActionTypes.INIT,
					});

					if (typeof initialState === 'undefined') {
						throw new Error(true ? formatProdErrorMessage(12) : 0);
					}

					if (
						typeof reducer(undefined, {
							type: ActionTypes.PROBE_UNKNOWN_ACTION(),
						}) === 'undefined'
					) {
						throw new Error(true ? formatProdErrorMessage(13) : 0);
					}
				});
			}
			/**
			 * Turns an object whose values are different reducer functions, into a single
			 * reducer function. It will call every child reducer, and gather their results
			 * into a single state object, whose keys correspond to the keys of the passed
			 * reducer functions.
			 *
			 * @param {Object} reducers An object whose values correspond to different
			 * reducer functions that need to be combined into one. One handy way to obtain
			 * it is to use ES6 `import * as reducers` syntax. The reducers may never return
			 * undefined for any action. Instead, they should return their initial state
			 * if the state passed to them was undefined, and the current state for any
			 * unrecognized action.
			 *
			 * @returns {Function} A reducer function that invokes every reducer inside the
			 * passed object, and builds a state object with the same shape.
			 */

			function redux_combineReducers(reducers) {
				var reducerKeys = Object.keys(reducers);
				var finalReducers = {};

				for (var i = 0; i < reducerKeys.length; i++) {
					var key = reducerKeys[i];

					if (false) {
					}

					if (typeof reducers[key] === 'function') {
						finalReducers[key] = reducers[key];
					}
				}

				var finalReducerKeys = Object.keys(finalReducers); // This is used to make sure we don't warn about the same
				// keys multiple times.

				var unexpectedKeyCache;

				if (false) {
				}

				var shapeAssertionError;

				try {
					assertReducerShape(finalReducers);
				} catch (e) {
					shapeAssertionError = e;
				}

				return function combination(state, action) {
					if (state === void 0) {
						state = {};
					}

					if (shapeAssertionError) {
						throw shapeAssertionError;
					}

					if (false) {
						var warningMessage;
					}

					var hasChanged = false;
					var nextState = {};

					for (var _i = 0; _i < finalReducerKeys.length; _i++) {
						var _key = finalReducerKeys[_i];
						var reducer = finalReducers[_key];
						var previousStateForKey = state[_key];
						var nextStateForKey = reducer(previousStateForKey, action);

						if (typeof nextStateForKey === 'undefined') {
							var actionType = action && action.type;
							throw new Error(true ? formatProdErrorMessage(14) : 0);
						}

						nextState[_key] = nextStateForKey;
						hasChanged = hasChanged || nextStateForKey !== previousStateForKey;
					}

					hasChanged = hasChanged || finalReducerKeys.length !== Object.keys(state).length;
					return hasChanged ? nextState : state;
				};
			}

			function bindActionCreator(actionCreator, dispatch) {
				return function () {
					return dispatch(actionCreator.apply(this, arguments));
				};
			}
			/**
			 * Turns an object whose values are action creators, into an object with the
			 * same keys, but with every function wrapped into a `dispatch` call so they
			 * may be invoked directly. This is just a convenience method, as you can call
			 * `store.dispatch(MyActionCreators.doSomething())` yourself just fine.
			 *
			 * For convenience, you can also pass an action creator as the first argument,
			 * and get a dispatch wrapped function in return.
			 *
			 * @param {Function|Object} actionCreators An object whose values are action
			 * creator functions. One handy way to obtain it is to use ES6 `import * as`
			 * syntax. You may also pass a single function.
			 *
			 * @param {Function} dispatch The `dispatch` function available on your Redux
			 * store.
			 *
			 * @returns {Function|Object} The object mimicking the original object, but with
			 * every action creator wrapped into the `dispatch` call. If you passed a
			 * function as `actionCreators`, the return value will also be a single
			 * function.
			 */

			function bindActionCreators(actionCreators, dispatch) {
				if (typeof actionCreators === 'function') {
					return bindActionCreator(actionCreators, dispatch);
				}

				if (typeof actionCreators !== 'object' || actionCreators === null) {
					throw new Error(true ? formatProdErrorMessage(16) : 0);
				}

				var boundActionCreators = {};

				for (var key in actionCreators) {
					var actionCreator = actionCreators[key];

					if (typeof actionCreator === 'function') {
						boundActionCreators[key] = bindActionCreator(actionCreator, dispatch);
					}
				}

				return boundActionCreators;
			}

			/**
			 * Composes single-argument functions from right to left. The rightmost
			 * function can take multiple arguments as it provides the signature for
			 * the resulting composite function.
			 *
			 * @param {...Function} funcs The functions to compose.
			 * @returns {Function} A function obtained by composing the argument functions
			 * from right to left. For example, compose(f, g, h) is identical to doing
			 * (...args) => f(g(h(...args))).
			 */
			function compose() {
				for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++) {
					funcs[_key] = arguments[_key];
				}

				if (funcs.length === 0) {
					return function (arg) {
						return arg;
					};
				}

				if (funcs.length === 1) {
					return funcs[0];
				}

				return funcs.reduce(function (a, b) {
					return function () {
						return a(b.apply(void 0, arguments));
					};
				});
			}

			/**
			 * Creates a store enhancer that applies middleware to the dispatch method
			 * of the Redux store. This is handy for a variety of tasks, such as expressing
			 * asynchronous actions in a concise manner, or logging every action payload.
			 *
			 * See `redux-thunk` package as an example of the Redux middleware.
			 *
			 * Because middleware is potentially asynchronous, this should be the first
			 * store enhancer in the composition chain.
			 *
			 * Note that each middleware will be given the `dispatch` and `getState` functions
			 * as named arguments.
			 *
			 * @param {...Function} middlewares The middleware chain to be applied.
			 * @returns {Function} A store enhancer applying the middleware.
			 */

			function redux_applyMiddleware() {
				for (var _len = arguments.length, middlewares = new Array(_len), _key = 0; _key < _len; _key++) {
					middlewares[_key] = arguments[_key];
				}

				return function (createStore) {
					return function () {
						var store = createStore.apply(void 0, arguments);

						var _dispatch = function dispatch() {
							throw new Error(true ? formatProdErrorMessage(15) : 0);
						};

						var middlewareAPI = {
							getState: store.getState,
							dispatch: function dispatch() {
								return _dispatch.apply(void 0, arguments);
							},
						};
						var chain = middlewares.map(function (middleware) {
							return middleware(middlewareAPI);
						});
						_dispatch = compose.apply(void 0, chain)(store.dispatch);
						return _objectSpread(
							_objectSpread({}, store),
							{},
							{
								dispatch: _dispatch,
							}
						);
					};
				};
			}

			/*
			 * This is a dummy function to check if the function name has been altered by minification.
			 * If the function has been minified and NODE_ENV !== 'production', warn the user.
			 */

			function isCrushed() {}

			if (false) {
			} // CONCATENATED MODULE: ./node_modules/redux-thunk/es/index.js

			function createThunkMiddleware(extraArgument) {
				return function (_ref) {
					var dispatch = _ref.dispatch,
						getState = _ref.getState;
					return function (next) {
						return function (action) {
							if (typeof action === 'function') {
								return action(dispatch, getState, extraArgument);
							}

							return next(action);
						};
					};
				};
			}

			var thunk = createThunkMiddleware();
			thunk.withExtraArgument = createThunkMiddleware;

			/* harmony default export */ const es = /* unused pure expression or super */ null && thunk; // CONCATENATED MODULE: ./node_modules/immer/dist/immer.esm.js
			function n(n) {
				for (var r = arguments.length, t = Array(r > 1 ? r - 1 : 0), e = 1; e < r; e++) t[e - 1] = arguments[e];
				if (false) {
					var i, o;
				}
				throw Error(
					'[Immer] minified error nr: ' +
						n +
						(t.length
							? ' ' +
							  t
									.map(function (n) {
										return "'" + n + "'";
									})
									.join(',')
							: '') +
						'. Find the full error at: https://bit.ly/3cXEKWf'
				);
			}
			function r(n) {
				return !!n && !!n[Q];
			}
			function t(n) {
				return (
					!!n &&
					((function (n) {
						if (!n || 'object' != typeof n) return !1;
						var r = Object.getPrototypeOf(n);
						if (null === r) return !0;
						var t = Object.hasOwnProperty.call(r, 'constructor') && r.constructor;
						return t === Object || ('function' == typeof t && Function.toString.call(t) === Z);
					})(n) ||
						Array.isArray(n) ||
						!!n[L] ||
						!!n.constructor[L] ||
						s(n) ||
						v(n))
				);
			}
			function e(t) {
				return r(t) || n(23, t), t[Q].t;
			}
			function i(n, r, t) {
				void 0 === t && (t = !1),
					0 === o(n)
						? (t ? Object.keys : nn)(n).forEach(function (e) {
								(t && 'symbol' == typeof e) || r(e, n[e], n);
						  })
						: n.forEach(function (t, e) {
								return r(e, t, n);
						  });
			}
			function o(n) {
				var r = n[Q];
				return r ? (r.i > 3 ? r.i - 4 : r.i) : Array.isArray(n) ? 1 : s(n) ? 2 : v(n) ? 3 : 0;
			}
			function u(n, r) {
				return 2 === o(n) ? n.has(r) : Object.prototype.hasOwnProperty.call(n, r);
			}
			function a(n, r) {
				return 2 === o(n) ? n.get(r) : n[r];
			}
			function f(n, r, t) {
				var e = o(n);
				2 === e ? n.set(r, t) : 3 === e ? (n.delete(r), n.add(t)) : (n[r] = t);
			}
			function c(n, r) {
				return n === r ? 0 !== n || 1 / n == 1 / r : n != n && r != r;
			}
			function s(n) {
				return X && n instanceof Map;
			}
			function v(n) {
				return q && n instanceof Set;
			}
			function p(n) {
				return n.o || n.t;
			}
			function l(n) {
				if (Array.isArray(n)) return Array.prototype.slice.call(n);
				var r = rn(n);
				delete r[Q];
				for (var t = nn(r), e = 0; e < t.length; e++) {
					var i = t[e],
						o = r[i];
					!1 === o.writable && ((o.writable = !0), (o.configurable = !0)), (o.get || o.set) && (r[i] = { configurable: !0, writable: !0, enumerable: o.enumerable, value: n[i] });
				}
				return Object.create(Object.getPrototypeOf(n), r);
			}
			function d(n, e) {
				return (
					void 0 === e && (e = !1),
					y(n) || r(n) || !t(n)
						? n
						: (o(n) > 1 && (n.set = n.add = n.clear = n.delete = h),
						  Object.freeze(n),
						  e &&
								i(
									n,
									function (n, r) {
										return d(r, !0);
									},
									!0
								),
						  n)
				);
			}
			function h() {
				n(2);
			}
			function y(n) {
				return null == n || 'object' != typeof n || Object.isFrozen(n);
			}
			function b(r) {
				var t = tn[r];
				return t || n(18, r), t;
			}
			function m(n, r) {
				tn[n] || (tn[n] = r);
			}
			function _() {
				return true || 0, U;
			}
			function j(n, r) {
				r && (b('Patches'), (n.u = []), (n.s = []), (n.v = r));
			}
			function O(n) {
				g(n), n.p.forEach(S), (n.p = null);
			}
			function g(n) {
				n === U && (U = n.l);
			}
			function w(n) {
				return (U = { p: [], l: U, h: n, m: !0, _: 0 });
			}
			function S(n) {
				var r = n[Q];
				0 === r.i || 1 === r.i ? r.j() : (r.O = !0);
			}
			function P(r, e) {
				e._ = e.p.length;
				var i = e.p[0],
					o = void 0 !== r && r !== i;
				return e.h.g || b('ES5').S(e, r, o), o ? (i[Q].P && (O(e), n(4)), t(r) && ((r = M(e, r)), e.l || x(e, r)), e.u && b('Patches').M(i[Q].t, r, e.u, e.s)) : (r = M(e, i, [])), O(e), e.u && e.v(e.u, e.s), r !== H ? r : void 0;
			}
			function M(n, r, t) {
				if (y(r)) return r;
				var e = r[Q];
				if (!e)
					return (
						i(
							r,
							function (i, o) {
								return A(n, e, r, i, o, t);
							},
							!0
						),
						r
					);
				if (e.A !== n) return r;
				if (!e.P) return x(n, e.t, !0), e.t;
				if (!e.I) {
					(e.I = !0), e.A._--;
					var o = 4 === e.i || 5 === e.i ? (e.o = l(e.k)) : e.o;
					i(3 === e.i ? new Set(o) : o, function (r, i) {
						return A(n, e, o, r, i, t);
					}),
						x(n, o, !1),
						t && n.u && b('Patches').R(e, t, n.u, n.s);
				}
				return e.o;
			}
			function A(e, i, o, a, c, s) {
				if ((false && 0, r(c))) {
					var v = M(e, c, s && i && 3 !== i.i && !u(i.D, a) ? s.concat(a) : void 0);
					if ((f(o, a, v), !r(v))) return;
					e.m = !1;
				}
				if (t(c) && !y(c)) {
					if (!e.h.F && e._ < 1) return;
					M(e, c), (i && i.A.l) || x(e, c);
				}
			}
			function x(n, r, t) {
				void 0 === t && (t = !1), n.h.F && n.m && d(r, t);
			}
			function z(n, r) {
				var t = n[Q];
				return (t ? p(t) : n)[r];
			}
			function I(n, r) {
				if (r in n)
					for (var t = Object.getPrototypeOf(n); t; ) {
						var e = Object.getOwnPropertyDescriptor(t, r);
						if (e) return e;
						t = Object.getPrototypeOf(t);
					}
			}
			function k(n) {
				n.P || ((n.P = !0), n.l && k(n.l));
			}
			function E(n) {
				n.o || (n.o = l(n.t));
			}
			function R(n, r, t) {
				var e = s(r)
					? b('MapSet').N(r, t)
					: v(r)
					? b('MapSet').T(r, t)
					: n.g
					? (function (n, r) {
							var t = Array.isArray(n),
								e = { i: t ? 1 : 0, A: r ? r.A : _(), P: !1, I: !1, D: {}, l: r, t: n, k: null, o: null, j: null, C: !1 },
								i = e,
								o = en;
							t && ((i = [e]), (o = on));
							var u = Proxy.revocable(i, o),
								a = u.revoke,
								f = u.proxy;
							return (e.k = f), (e.j = a), f;
					  })(r, t)
					: b('ES5').J(r, t);
				return (t ? t.A : _()).p.push(e), e;
			}
			function D(e) {
				return (
					r(e) || n(22, e),
					(function n(r) {
						if (!t(r)) return r;
						var e,
							u = r[Q],
							c = o(r);
						if (u) {
							if (!u.P && (u.i < 4 || !b('ES5').K(u))) return u.t;
							(u.I = !0), (e = F(r, c)), (u.I = !1);
						} else e = F(r, c);
						return (
							i(e, function (r, t) {
								(u && a(u.t, r) === t) || f(e, r, n(t));
							}),
							3 === c ? new Set(e) : e
						);
					})(e)
				);
			}
			function F(n, r) {
				switch (r) {
					case 2:
						return new Map(n);
					case 3:
						return Array.from(n);
				}
				return l(n);
			}
			function N() {
				function t(n, r) {
					var t = s[n];
					return (
						t
							? (t.enumerable = r)
							: (s[n] = t =
									{
										configurable: !0,
										enumerable: r,
										get: function () {
											var r = this[Q];
											return false && 0, en.get(r, n);
										},
										set: function (r) {
											var t = this[Q];
											false && 0, en.set(t, n, r);
										},
									}),
						t
					);
				}
				function e(n) {
					for (var r = n.length - 1; r >= 0; r--) {
						var t = n[r][Q];
						if (!t.P)
							switch (t.i) {
								case 5:
									a(t) && k(t);
									break;
								case 4:
									o(t) && k(t);
							}
					}
				}
				function o(n) {
					for (var r = n.t, t = n.k, e = nn(t), i = e.length - 1; i >= 0; i--) {
						var o = e[i];
						if (o !== Q) {
							var a = r[o];
							if (void 0 === a && !u(r, o)) return !0;
							var f = t[o],
								s = f && f[Q];
							if (s ? s.t !== a : !c(f, a)) return !0;
						}
					}
					var v = !!r[Q];
					return e.length !== nn(r).length + (v ? 0 : 1);
				}
				function a(n) {
					var r = n.k;
					if (r.length !== n.t.length) return !0;
					var t = Object.getOwnPropertyDescriptor(r, r.length - 1);
					if (t && !t.get) return !0;
					for (var e = 0; e < r.length; e++) if (!r.hasOwnProperty(e)) return !0;
					return !1;
				}
				function f(r) {
					r.O && n(3, JSON.stringify(p(r)));
				}
				var s = {};
				m('ES5', {
					J: function (n, r) {
						var e = Array.isArray(n),
							i = (function (n, r) {
								if (n) {
									for (var e = Array(r.length), i = 0; i < r.length; i++) Object.defineProperty(e, '' + i, t(i, !0));
									return e;
								}
								var o = rn(r);
								delete o[Q];
								for (var u = nn(o), a = 0; a < u.length; a++) {
									var f = u[a];
									o[f] = t(f, n || !!o[f].enumerable);
								}
								return Object.create(Object.getPrototypeOf(r), o);
							})(e, n),
							o = { i: e ? 5 : 4, A: r ? r.A : _(), P: !1, I: !1, D: {}, l: r, t: n, k: i, o: null, O: !1, C: !1 };
						return Object.defineProperty(i, Q, { value: o, writable: !0 }), i;
					},
					S: function (n, t, o) {
						o
							? r(t) && t[Q].A === n && e(n.p)
							: (n.u &&
									(function n(r) {
										if (r && 'object' == typeof r) {
											var t = r[Q];
											if (t) {
												var e = t.t,
													o = t.k,
													f = t.D,
													c = t.i;
												if (4 === c)
													i(o, function (r) {
														r !== Q && (void 0 !== e[r] || u(e, r) ? f[r] || n(o[r]) : ((f[r] = !0), k(t)));
													}),
														i(e, function (n) {
															void 0 !== o[n] || u(o, n) || ((f[n] = !1), k(t));
														});
												else if (5 === c) {
													if ((a(t) && (k(t), (f.length = !0)), o.length < e.length)) for (var s = o.length; s < e.length; s++) f[s] = !1;
													else for (var v = e.length; v < o.length; v++) f[v] = !0;
													for (var p = Math.min(o.length, e.length), l = 0; l < p; l++) o.hasOwnProperty(l) || (f[l] = !0), void 0 === f[l] && n(o[l]);
												}
											}
										}
									})(n.p[0]),
							  e(n.p));
					},
					K: function (n) {
						return 4 === n.i ? o(n) : a(n);
					},
				});
			}
			function T() {
				function e(n) {
					if (!t(n)) return n;
					if (Array.isArray(n)) return n.map(e);
					if (s(n))
						return new Map(
							Array.from(n.entries()).map(function (n) {
								return [n[0], e(n[1])];
							})
						);
					if (v(n)) return new Set(Array.from(n).map(e));
					var r = Object.create(Object.getPrototypeOf(n));
					for (var i in n) r[i] = e(n[i]);
					return u(n, L) && (r[L] = n[L]), r;
				}
				function f(n) {
					return r(n) ? e(n) : n;
				}
				var c = 'add';
				m('Patches', {
					$: function (r, t) {
						return (
							t.forEach(function (t) {
								for (var i = t.path, u = t.op, f = r, s = 0; s < i.length - 1; s++) {
									var v = o(f),
										p = '' + i[s];
									(0 !== v && 1 !== v) || ('__proto__' !== p && 'constructor' !== p) || n(24), 'function' == typeof f && 'prototype' === p && n(24), 'object' != typeof (f = a(f, p)) && n(15, i.join('/'));
								}
								var l = o(f),
									d = e(t.value),
									h = i[i.length - 1];
								switch (u) {
									case 'replace':
										switch (l) {
											case 2:
												return f.set(h, d);
											case 3:
												n(16);
											default:
												return (f[h] = d);
										}
									case c:
										switch (l) {
											case 1:
												return '-' === h ? f.push(d) : f.splice(h, 0, d);
											case 2:
												return f.set(h, d);
											case 3:
												return f.add(d);
											default:
												return (f[h] = d);
										}
									case 'remove':
										switch (l) {
											case 1:
												return f.splice(h, 1);
											case 2:
												return f.delete(h);
											case 3:
												return f.delete(t.value);
											default:
												return delete f[h];
										}
									default:
										n(17, u);
								}
							}),
							r
						);
					},
					R: function (n, r, t, e) {
						switch (n.i) {
							case 0:
							case 4:
							case 2:
								return (function (n, r, t, e) {
									var o = n.t,
										s = n.o;
									i(n.D, function (n, i) {
										var v = a(o, n),
											p = a(s, n),
											l = i ? (u(o, n) ? 'replace' : c) : 'remove';
										if (v !== p || 'replace' !== l) {
											var d = r.concat(n);
											t.push('remove' === l ? { op: l, path: d } : { op: l, path: d, value: p }), e.push(l === c ? { op: 'remove', path: d } : 'remove' === l ? { op: c, path: d, value: f(v) } : { op: 'replace', path: d, value: f(v) });
										}
									});
								})(n, r, t, e);
							case 5:
							case 1:
								return (function (n, r, t, e) {
									var i = n.t,
										o = n.D,
										u = n.o;
									if (u.length < i.length) {
										var a = [u, i];
										(i = a[0]), (u = a[1]);
										var s = [e, t];
										(t = s[0]), (e = s[1]);
									}
									for (var v = 0; v < i.length; v++)
										if (o[v] && u[v] !== i[v]) {
											var p = r.concat([v]);
											t.push({ op: 'replace', path: p, value: f(u[v]) }), e.push({ op: 'replace', path: p, value: f(i[v]) });
										}
									for (var l = i.length; l < u.length; l++) {
										var d = r.concat([l]);
										t.push({ op: c, path: d, value: f(u[l]) });
									}
									i.length < u.length && e.push({ op: 'replace', path: r.concat(['length']), value: i.length });
								})(n, r, t, e);
							case 3:
								return (function (n, r, t, e) {
									var i = n.t,
										o = n.o,
										u = 0;
									i.forEach(function (n) {
										if (!o.has(n)) {
											var i = r.concat([u]);
											t.push({ op: 'remove', path: i, value: n }), e.unshift({ op: c, path: i, value: n });
										}
										u++;
									}),
										(u = 0),
										o.forEach(function (n) {
											if (!i.has(n)) {
												var o = r.concat([u]);
												t.push({ op: c, path: o, value: n }), e.unshift({ op: 'remove', path: o, value: n });
											}
											u++;
										});
								})(n, r, t, e);
						}
					},
					M: function (n, r, t, e) {
						t.push({ op: 'replace', path: [], value: r === H ? void 0 : r }), e.push({ op: 'replace', path: [], value: n });
					},
				});
			}
			function C() {
				function r(n, r) {
					function t() {
						this.constructor = n;
					}
					a(n, r), (n.prototype = ((t.prototype = r.prototype), new t()));
				}
				function e(n) {
					n.o || ((n.D = new Map()), (n.o = new Map(n.t)));
				}
				function o(n) {
					n.o ||
						((n.o = new Set()),
						n.t.forEach(function (r) {
							if (t(r)) {
								var e = R(n.A.h, r, n);
								n.p.set(r, e), n.o.add(e);
							} else n.o.add(r);
						}));
				}
				function u(r) {
					r.O && n(3, JSON.stringify(p(r)));
				}
				var a = function (n, r) {
						return (a =
							Object.setPrototypeOf ||
							({ __proto__: [] } instanceof Array &&
								function (n, r) {
									n.__proto__ = r;
								}) ||
							function (n, r) {
								for (var t in r) r.hasOwnProperty(t) && (n[t] = r[t]);
							})(n, r);
					},
					f = (function () {
						function n(n, r) {
							return (this[Q] = { i: 2, l: r, A: r ? r.A : _(), P: !1, I: !1, o: void 0, D: void 0, t: n, k: this, C: !1, O: !1 }), this;
						}
						r(n, Map);
						var o = n.prototype;
						return (
							Object.defineProperty(o, 'size', {
								get: function () {
									return p(this[Q]).size;
								},
							}),
							(o.has = function (n) {
								return p(this[Q]).has(n);
							}),
							(o.set = function (n, r) {
								var t = this[Q];
								return u(t), (p(t).has(n) && p(t).get(n) === r) || (e(t), k(t), t.D.set(n, !0), t.o.set(n, r), t.D.set(n, !0)), this;
							}),
							(o.delete = function (n) {
								if (!this.has(n)) return !1;
								var r = this[Q];
								return u(r), e(r), k(r), r.t.has(n) ? r.D.set(n, !1) : r.D.delete(n), r.o.delete(n), !0;
							}),
							(o.clear = function () {
								var n = this[Q];
								u(n),
									p(n).size &&
										(e(n),
										k(n),
										(n.D = new Map()),
										i(n.t, function (r) {
											n.D.set(r, !1);
										}),
										n.o.clear());
							}),
							(o.forEach = function (n, r) {
								var t = this;
								p(this[Q]).forEach(function (e, i) {
									n.call(r, t.get(i), i, t);
								});
							}),
							(o.get = function (n) {
								var r = this[Q];
								u(r);
								var i = p(r).get(n);
								if (r.I || !t(i)) return i;
								if (i !== r.t.get(n)) return i;
								var o = R(r.A.h, i, r);
								return e(r), r.o.set(n, o), o;
							}),
							(o.keys = function () {
								return p(this[Q]).keys();
							}),
							(o.values = function () {
								var n,
									r = this,
									t = this.keys();
								return (
									((n = {})[V] = function () {
										return r.values();
									}),
									(n.next = function () {
										var n = t.next();
										return n.done ? n : { done: !1, value: r.get(n.value) };
									}),
									n
								);
							}),
							(o.entries = function () {
								var n,
									r = this,
									t = this.keys();
								return (
									((n = {})[V] = function () {
										return r.entries();
									}),
									(n.next = function () {
										var n = t.next();
										if (n.done) return n;
										var e = r.get(n.value);
										return { done: !1, value: [n.value, e] };
									}),
									n
								);
							}),
							(o[V] = function () {
								return this.entries();
							}),
							n
						);
					})(),
					c = (function () {
						function n(n, r) {
							return (this[Q] = { i: 3, l: r, A: r ? r.A : _(), P: !1, I: !1, o: void 0, t: n, k: this, p: new Map(), O: !1, C: !1 }), this;
						}
						r(n, Set);
						var t = n.prototype;
						return (
							Object.defineProperty(t, 'size', {
								get: function () {
									return p(this[Q]).size;
								},
							}),
							(t.has = function (n) {
								var r = this[Q];
								return u(r), r.o ? !!r.o.has(n) || !(!r.p.has(n) || !r.o.has(r.p.get(n))) : r.t.has(n);
							}),
							(t.add = function (n) {
								var r = this[Q];
								return u(r), this.has(n) || (o(r), k(r), r.o.add(n)), this;
							}),
							(t.delete = function (n) {
								if (!this.has(n)) return !1;
								var r = this[Q];
								return u(r), o(r), k(r), r.o.delete(n) || (!!r.p.has(n) && r.o.delete(r.p.get(n)));
							}),
							(t.clear = function () {
								var n = this[Q];
								u(n), p(n).size && (o(n), k(n), n.o.clear());
							}),
							(t.values = function () {
								var n = this[Q];
								return u(n), o(n), n.o.values();
							}),
							(t.entries = function () {
								var n = this[Q];
								return u(n), o(n), n.o.entries();
							}),
							(t.keys = function () {
								return this.values();
							}),
							(t[V] = function () {
								return this.values();
							}),
							(t.forEach = function (n, r) {
								for (var t = this.values(), e = t.next(); !e.done; ) n.call(r, e.value, e.value, this), (e = t.next());
							}),
							n
						);
					})();
				m('MapSet', {
					N: function (n, r) {
						return new f(n, r);
					},
					T: function (n, r) {
						return new c(n, r);
					},
				});
			}
			function J() {
				N(), C(), T();
			}
			function K(n) {
				return n;
			}
			function $(n) {
				return n;
			}
			var G,
				U,
				W = 'undefined' != typeof Symbol && 'symbol' == typeof Symbol('x'),
				X = 'undefined' != typeof Map,
				q = 'undefined' != typeof Set,
				B = 'undefined' != typeof Proxy && void 0 !== Proxy.revocable && 'undefined' != typeof Reflect,
				H = W ? Symbol.for('immer-nothing') : (((G = {})['immer-nothing'] = !0), G),
				L = W ? Symbol.for('immer-draftable') : '__$immer_draftable',
				Q = W ? Symbol.for('immer-state') : '__$immer_state',
				V = ('undefined' != typeof Symbol && Symbol.iterator) || '@@iterator',
				Y = {
					0: 'Illegal state',
					1: 'Immer drafts cannot have computed properties',
					2: 'This object has been frozen and should not be mutated',
					3: function (n) {
						return 'Cannot use a proxy that has been revoked. Did you pass an object from inside an immer function to an async process? ' + n;
					},
					4: 'An immer producer returned a new value *and* modified its draft. Either return a new value *or* modify the draft.',
					5: 'Immer forbids circular references',
					6: 'The first or second argument to `produce` must be a function',
					7: 'The third argument to `produce` must be a function or undefined',
					8: 'First argument to `createDraft` must be a plain object, an array, or an immerable object',
					9: 'First argument to `finishDraft` must be a draft returned by `createDraft`',
					10: 'The given draft is already finalized',
					11: 'Object.defineProperty() cannot be used on an Immer draft',
					12: 'Object.setPrototypeOf() cannot be used on an Immer draft',
					13: 'Immer only supports deleting array indices',
					14: "Immer only supports setting array indices and the 'length' property",
					15: function (n) {
						return "Cannot apply patch, path doesn't resolve: " + n;
					},
					16: 'Sets cannot have "replace" patches.',
					17: function (n) {
						return 'Unsupported patch operation: ' + n;
					},
					18: function (n) {
						return "The plugin for '" + n + "' has not been loaded into Immer. To enable the plugin, import and call `enable" + n + '()` when initializing your application.';
					},
					20: 'Cannot use proxies if Proxy, Proxy.revocable or Reflect are not available',
					21: function (n) {
						return "produce can only be called on things that are draftable: plain objects, arrays, Map, Set or classes that are marked with '[immerable]: true'. Got '" + n + "'";
					},
					22: function (n) {
						return "'current' expects a draft, got: " + n;
					},
					23: function (n) {
						return "'original' expects a draft, got: " + n;
					},
					24: 'Patching reserved attributes like __proto__, prototype and constructor is not allowed',
				},
				Z = '' + Object.prototype.constructor,
				nn =
					'undefined' != typeof Reflect && Reflect.ownKeys
						? Reflect.ownKeys
						: void 0 !== Object.getOwnPropertySymbols
						? function (n) {
								return Object.getOwnPropertyNames(n).concat(Object.getOwnPropertySymbols(n));
						  }
						: Object.getOwnPropertyNames,
				rn =
					Object.getOwnPropertyDescriptors ||
					function (n) {
						var r = {};
						return (
							nn(n).forEach(function (t) {
								r[t] = Object.getOwnPropertyDescriptor(n, t);
							}),
							r
						);
					},
				tn = {},
				en = {
					get: function (n, r) {
						if (r === Q) return n;
						var e = p(n);
						if (!u(e, r))
							return (function (n, r, t) {
								var e,
									i = I(r, t);
								return i ? ('value' in i ? i.value : null === (e = i.get) || void 0 === e ? void 0 : e.call(n.k)) : void 0;
							})(n, e, r);
						var i = e[r];
						return n.I || !t(i) ? i : i === z(n.t, r) ? (E(n), (n.o[r] = R(n.A.h, i, n))) : i;
					},
					has: function (n, r) {
						return r in p(n);
					},
					ownKeys: function (n) {
						return Reflect.ownKeys(p(n));
					},
					set: function (n, r, t) {
						var e = I(p(n), r);
						if (null == e ? void 0 : e.set) return e.set.call(n.k, t), !0;
						if (!n.P) {
							var i = z(p(n), r),
								o = null == i ? void 0 : i[Q];
							if (o && o.t === t) return (n.o[r] = t), (n.D[r] = !1), !0;
							if (c(t, i) && (void 0 !== t || u(n.t, r))) return !0;
							E(n), k(n);
						}
						return (n.o[r] === t && 'number' != typeof t && (void 0 !== t || r in n.o)) || ((n.o[r] = t), (n.D[r] = !0), !0);
					},
					deleteProperty: function (n, r) {
						return void 0 !== z(n.t, r) || r in n.t ? ((n.D[r] = !1), E(n), k(n)) : delete n.D[r], n.o && delete n.o[r], !0;
					},
					getOwnPropertyDescriptor: function (n, r) {
						var t = p(n),
							e = Reflect.getOwnPropertyDescriptor(t, r);
						return e ? { writable: !0, configurable: 1 !== n.i || 'length' !== r, enumerable: e.enumerable, value: t[r] } : e;
					},
					defineProperty: function () {
						n(11);
					},
					getPrototypeOf: function (n) {
						return Object.getPrototypeOf(n.t);
					},
					setPrototypeOf: function () {
						n(12);
					},
				},
				on = {};
			i(en, function (n, r) {
				on[n] = function () {
					return (arguments[0] = arguments[0][0]), r.apply(this, arguments);
				};
			}),
				(on.deleteProperty = function (r, t) {
					return false && 0, on.set.call(this, r, t, void 0);
				}),
				(on.set = function (r, t, e) {
					return false && 0, en.set.call(this, r[0], t, e, r[0]);
				});
			var un = (function () {
					function e(r) {
						var e = this;
						(this.g = B),
							(this.F = !0),
							(this.produce = function (r, i, o) {
								if ('function' == typeof r && 'function' != typeof i) {
									var u = i;
									i = r;
									var a = e;
									return function (n) {
										var r = this;
										void 0 === n && (n = u);
										for (var t = arguments.length, e = Array(t > 1 ? t - 1 : 0), o = 1; o < t; o++) e[o - 1] = arguments[o];
										return a.produce(n, function (n) {
											var t;
											return (t = i).call.apply(t, [r, n].concat(e));
										});
									};
								}
								var f;
								if (('function' != typeof i && n(6), void 0 !== o && 'function' != typeof o && n(7), t(r))) {
									var c = w(e),
										s = R(e, r, void 0),
										v = !0;
									try {
										(f = i(s)), (v = !1);
									} finally {
										v ? O(c) : g(c);
									}
									return 'undefined' != typeof Promise && f instanceof Promise
										? f.then(
												function (n) {
													return j(c, o), P(n, c);
												},
												function (n) {
													throw (O(c), n);
												}
										  )
										: (j(c, o), P(f, c));
								}
								if (!r || 'object' != typeof r) {
									if ((void 0 === (f = i(r)) && (f = r), f === H && (f = void 0), e.F && d(f, !0), o)) {
										var p = [],
											l = [];
										b('Patches').M(r, f, p, l), o(p, l);
									}
									return f;
								}
								n(21, r);
							}),
							(this.produceWithPatches = function (n, r) {
								if ('function' == typeof n)
									return function (r) {
										for (var t = arguments.length, i = Array(t > 1 ? t - 1 : 0), o = 1; o < t; o++) i[o - 1] = arguments[o];
										return e.produceWithPatches(r, function (r) {
											return n.apply(void 0, [r].concat(i));
										});
									};
								var t,
									i,
									o = e.produce(n, r, function (n, r) {
										(t = n), (i = r);
									});
								return 'undefined' != typeof Promise && o instanceof Promise
									? o.then(function (n) {
											return [n, t, i];
									  })
									: [o, t, i];
							}),
							'boolean' == typeof (null == r ? void 0 : r.useProxies) && this.setUseProxies(r.useProxies),
							'boolean' == typeof (null == r ? void 0 : r.autoFreeze) && this.setAutoFreeze(r.autoFreeze);
					}
					var i = e.prototype;
					return (
						(i.createDraft = function (e) {
							t(e) || n(8), r(e) && (e = D(e));
							var i = w(this),
								o = R(this, e, void 0);
							return (o[Q].C = !0), g(i), o;
						}),
						(i.finishDraft = function (r, t) {
							var e = r && r[Q];
							false && 0;
							var i = e.A;
							return j(i, t), P(void 0, i);
						}),
						(i.setAutoFreeze = function (n) {
							this.F = n;
						}),
						(i.setUseProxies = function (r) {
							r && !B && n(20), (this.g = r);
						}),
						(i.applyPatches = function (n, t) {
							var e;
							for (e = t.length - 1; e >= 0; e--) {
								var i = t[e];
								if (0 === i.path.length && 'replace' === i.op) {
									n = i.value;
									break;
								}
							}
							e > -1 && (t = t.slice(e + 1));
							var o = b('Patches').$;
							return r(n)
								? o(n, t)
								: this.produce(n, function (n) {
										return o(n, t);
								  });
						}),
						e
					);
				})(),
				an = new un(),
				fn = an.produce,
				cn = an.produceWithPatches.bind(an),
				sn = an.setAutoFreeze.bind(an),
				vn = an.setUseProxies.bind(an),
				pn = an.applyPatches.bind(an),
				ln = an.createDraft.bind(an),
				dn = an.finishDraft.bind(an);
			/* harmony default export */ const immer_esm = fn; // CONCATENATED MODULE: ./node_modules/@reduxjs/toolkit/dist/redux-toolkit.esm.js
			//# sourceMappingURL=immer.esm.js.map

			var redux_toolkit_esm_extends =
				(undefined && undefined.__extends) ||
				(function () {
					var extendStatics = function (d, b) {
						extendStatics =
							Object.setPrototypeOf ||
							({ __proto__: [] } instanceof Array &&
								function (d, b) {
									d.__proto__ = b;
								}) ||
							function (d, b) {
								for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
							};
						return extendStatics(d, b);
					};
					return function (d, b) {
						if (typeof b !== 'function' && b !== null) throw new TypeError('Class extends value ' + String(b) + ' is not a constructor or null');
						extendStatics(d, b);
						function __() {
							this.constructor = d;
						}
						d.prototype = b === null ? Object.create(b) : ((__.prototype = b.prototype), new __());
					};
				})();
			var __generator =
				(undefined && undefined.__generator) ||
				function (thisArg, body) {
					var _ = {
							label: 0,
							sent: function () {
								if (t[0] & 1) throw t[1];
								return t[1];
							},
							trys: [],
							ops: [],
						},
						f,
						y,
						t,
						g;
					return (
						(g = { next: verb(0), throw: verb(1), return: verb(2) }),
						typeof Symbol === 'function' &&
							(g[Symbol.iterator] = function () {
								return this;
							}),
						g
					);
					function verb(n) {
						return function (v) {
							return step([n, v]);
						};
					}
					function step(op) {
						if (f) throw new TypeError('Generator is already executing.');
						while (_)
							try {
								if (((f = 1), y && (t = op[0] & 2 ? y['return'] : op[0] ? y['throw'] || ((t = y['return']) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)) return t;
								if (((y = 0), t)) op = [op[0] & 2, t.value];
								switch (op[0]) {
									case 0:
									case 1:
										t = op;
										break;
									case 4:
										_.label++;
										return { value: op[1], done: false };
									case 5:
										_.label++;
										y = op[1];
										op = [0];
										continue;
									case 7:
										op = _.ops.pop();
										_.trys.pop();
										continue;
									default:
										if (!((t = _.trys), (t = t.length > 0 && t[t.length - 1])) && (op[0] === 6 || op[0] === 2)) {
											_ = 0;
											continue;
										}
										if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
											_.label = op[1];
											break;
										}
										if (op[0] === 6 && _.label < t[1]) {
											_.label = t[1];
											t = op;
											break;
										}
										if (t && _.label < t[2]) {
											_.label = t[2];
											_.ops.push(op);
											break;
										}
										if (t[2]) _.ops.pop();
										_.trys.pop();
										continue;
								}
								op = body.call(thisArg, _);
							} catch (e) {
								op = [6, e];
								y = 0;
							} finally {
								f = t = 0;
							}
						if (op[0] & 5) throw op[1];
						return { value: op[0] ? op[1] : void 0, done: true };
					}
				};
			var redux_toolkit_esm_spreadArray =
				(undefined && undefined.__spreadArray) ||
				function (to, from) {
					for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) to[j] = from[i];
					return to;
				};
			var __defProp = Object.defineProperty;
			var __hasOwnProp = Object.prototype.hasOwnProperty;
			var __getOwnPropSymbols = Object.getOwnPropertySymbols;
			var __propIsEnum = Object.prototype.propertyIsEnumerable;
			var __defNormalProp = function (obj, key, value) {
				return key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value: value }) : (obj[key] = value);
			};
			var __objSpread = function (a, b) {
				for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);
				if (__getOwnPropSymbols)
					for (var _i = 0, _b = __getOwnPropSymbols(b); _i < _b.length; _i++) {
						var prop = _b[_i];
						if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);
					}
				return a;
			};
			var __async = function (__this, __arguments, generator) {
				return new Promise(function (resolve, reject) {
					var fulfilled = function (value) {
						try {
							step(generator.next(value));
						} catch (e) {
							reject(e);
						}
					};
					var rejected = function (value) {
						try {
							step(generator.throw(value));
						} catch (e) {
							reject(e);
						}
					};
					var step = function (x) {
						return x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
					};
					step((generator = generator.apply(__this, __arguments)).next());
				});
			};
			// src/index.ts

			// src/createDraftSafeSelector.ts

			var createDraftSafeSelector = function () {
				var args = [];
				for (var _i = 0; _i < arguments.length; _i++) {
					args[_i] = arguments[_i];
				}
				var selector = createSelector.apply(void 0, args);
				var wrappedSelector = function (value) {
					var rest = [];
					for (var _i = 1; _i < arguments.length; _i++) {
						rest[_i - 1] = arguments[_i];
					}
					return selector.apply(void 0, redux_toolkit_esm_spreadArray([isDraft(value) ? current(value) : value], rest));
				};
				return wrappedSelector;
			};
			// src/configureStore.ts

			// src/devtoolsExtension.ts

			var composeWithDevTools =
				typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__
					? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__
					: function () {
							if (arguments.length === 0) return void 0;
							if (typeof arguments[0] === 'object') return compose;
							return compose.apply(null, arguments);
					  };
			var devToolsEnhancer =
				typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION__
					? window.__REDUX_DEVTOOLS_EXTENSION__
					: function () {
							return function (noop) {
								return noop;
							};
					  };
			// src/isPlainObject.ts
			function redux_toolkit_esm_isPlainObject(value) {
				if (typeof value !== 'object' || value === null) return false;
				var proto = value;
				while (Object.getPrototypeOf(proto) !== null) {
					proto = Object.getPrototypeOf(proto);
				}
				return Object.getPrototypeOf(value) === proto;
			}
			// src/getDefaultMiddleware.ts

			// src/utils.ts
			function getTimeMeasureUtils(maxDelay, fnName) {
				var elapsed = 0;
				return {
					measureTime: function (fn) {
						var started = Date.now();
						try {
							return fn();
						} finally {
							var finished = Date.now();
							elapsed += finished - started;
						}
					},
					warnIfExceeded: function () {
						if (elapsed > maxDelay) {
							console.warn(fnName + ' took ' + elapsed + 'ms, which is more than the warning threshold of ' + maxDelay + "ms. \nIf your state or actions are very large, you may want to disable the middleware as it might cause too much of a slowdown in development mode. See https://redux-toolkit.js.org/api/getDefaultMiddleware for instructions.\nIt is disabled in production builds, so you don't need to worry about that.");
						}
					},
				};
			}
			var MiddlewareArray = /** @class */ (function (_super) {
				redux_toolkit_esm_extends(MiddlewareArray, _super);
				function MiddlewareArray() {
					var args = [];
					for (var _i = 0; _i < arguments.length; _i++) {
						args[_i] = arguments[_i];
					}
					var _this = _super.apply(this, args) || this;
					Object.setPrototypeOf(_this, MiddlewareArray.prototype);
					return _this;
				}
				Object.defineProperty(MiddlewareArray, Symbol.species, {
					get: function () {
						return MiddlewareArray;
					},
					enumerable: false,
					configurable: true,
				});
				MiddlewareArray.prototype.concat = function () {
					var arr = [];
					for (var _i = 0; _i < arguments.length; _i++) {
						arr[_i] = arguments[_i];
					}
					return _super.prototype.concat.apply(this, arr);
				};
				MiddlewareArray.prototype.prepend = function () {
					var arr = [];
					for (var _i = 0; _i < arguments.length; _i++) {
						arr[_i] = arguments[_i];
					}
					if (arr.length === 1 && Array.isArray(arr[0])) {
						return new (MiddlewareArray.bind.apply(MiddlewareArray, redux_toolkit_esm_spreadArray([void 0], arr[0].concat(this))))();
					}
					return new (MiddlewareArray.bind.apply(MiddlewareArray, redux_toolkit_esm_spreadArray([void 0], arr.concat(this))))();
				};
				return MiddlewareArray;
			})(Array);
			// src/immutableStateInvariantMiddleware.ts
			var isProduction = /* unused pure expression or super */ null && 'production' === 'production';
			var prefix = 'Invariant failed';
			function invariant(condition, message) {
				if (condition) {
					return;
				}
				if (isProduction) {
					throw new Error(prefix);
				}
				throw new Error(prefix + ': ' + (message || ''));
			}
			function stringify(obj, serializer, indent, decycler) {
				return JSON.stringify(obj, getSerialize(serializer, decycler), indent);
			}
			function getSerialize(serializer, decycler) {
				var stack = [],
					keys = [];
				if (!decycler)
					decycler = function (_, value) {
						if (stack[0] === value) return '[Circular ~]';
						return '[Circular ~.' + keys.slice(0, stack.indexOf(value)).join('.') + ']';
					};
				return function (key, value) {
					if (stack.length > 0) {
						var thisPos = stack.indexOf(this);
						~thisPos ? stack.splice(thisPos + 1) : stack.push(this);
						~thisPos ? keys.splice(thisPos, Infinity, key) : keys.push(key);
						if (~stack.indexOf(value)) value = decycler.call(this, key, value);
					} else stack.push(value);
					return serializer == null ? value : serializer.call(this, key, value);
				};
			}
			function isImmutableDefault(value) {
				return typeof value !== 'object' || value === null || typeof value === 'undefined' || Object.isFrozen(value);
			}
			function trackForMutations(isImmutable, ignorePaths, obj) {
				var trackedProperties = trackProperties(isImmutable, ignorePaths, obj);
				return {
					detectMutations: function () {
						return detectMutations(isImmutable, ignorePaths, trackedProperties, obj);
					},
				};
			}
			function trackProperties(isImmutable, ignorePaths, obj, path) {
				if (ignorePaths === void 0) {
					ignorePaths = [];
				}
				if (path === void 0) {
					path = '';
				}
				var tracked = { value: obj };
				if (!isImmutable(obj)) {
					tracked.children = {};
					for (var key in obj) {
						var childPath = path ? path + '.' + key : key;
						if (ignorePaths.length && ignorePaths.indexOf(childPath) !== -1) {
							continue;
						}
						tracked.children[key] = trackProperties(isImmutable, ignorePaths, obj[key], childPath);
					}
				}
				return tracked;
			}
			function detectMutations(isImmutable, ignorePaths, trackedProperty, obj, sameParentRef, path) {
				if (ignorePaths === void 0) {
					ignorePaths = [];
				}
				if (sameParentRef === void 0) {
					sameParentRef = false;
				}
				if (path === void 0) {
					path = '';
				}
				var prevObj = trackedProperty ? trackedProperty.value : void 0;
				var sameRef = prevObj === obj;
				if (sameParentRef && !sameRef && !Number.isNaN(obj)) {
					return { wasMutated: true, path: path };
				}
				if (isImmutable(prevObj) || isImmutable(obj)) {
					return { wasMutated: false };
				}
				var keysToDetect = {};
				for (var key in trackedProperty.children) {
					keysToDetect[key] = true;
				}
				for (var key in obj) {
					keysToDetect[key] = true;
				}
				for (var key in keysToDetect) {
					var childPath = path ? path + '.' + key : key;
					if (ignorePaths.length && ignorePaths.indexOf(childPath) !== -1) {
						continue;
					}
					var result = detectMutations(isImmutable, ignorePaths, trackedProperty.children[key], obj[key], sameRef, childPath);
					if (result.wasMutated) {
						return result;
					}
				}
				return { wasMutated: false };
			}
			function createImmutableStateInvariantMiddleware(options) {
				if (options === void 0) {
					options = {};
				}
				if (true) {
					return function () {
						return function (next) {
							return function (action) {
								return next(action);
							};
						};
					};
				}
				var _b = options.isImmutable,
					isImmutable = _b === void 0 ? isImmutableDefault : _b,
					ignoredPaths = options.ignoredPaths,
					_c = options.warnAfter,
					warnAfter = _c === void 0 ? 32 : _c,
					ignore = options.ignore;
				ignoredPaths = ignoredPaths || ignore;
				var track = trackForMutations.bind(null, isImmutable, ignoredPaths);
				return function (_b) {
					var getState = _b.getState;
					var state = getState();
					var tracker = track(state);
					var result;
					return function (next) {
						return function (action) {
							var measureUtils = getTimeMeasureUtils(warnAfter, 'ImmutableStateInvariantMiddleware');
							measureUtils.measureTime(function () {
								state = getState();
								result = tracker.detectMutations();
								tracker = track(state);
								invariant(!result.wasMutated, "A state mutation was detected between dispatches, in the path '" + (result.path || '') + "'.  This may cause incorrect behavior. (https://redux.js.org/style-guide/style-guide#do-not-mutate-state)");
							});
							var dispatchedAction = next(action);
							measureUtils.measureTime(function () {
								state = getState();
								result = tracker.detectMutations();
								tracker = track(state);
								result.wasMutated && invariant(!result.wasMutated, 'A state mutation was detected inside a dispatch, in the path: ' + (result.path || '') + '. Take a look at the reducer(s) handling the action ' + stringify(action) + '. (https://redux.js.org/style-guide/style-guide#do-not-mutate-state)');
							});
							measureUtils.warnIfExceeded();
							return dispatchedAction;
						};
					};
				};
			}
			// src/serializableStateInvariantMiddleware.ts
			function isPlain(val) {
				var type = typeof val;
				return type === 'undefined' || val === null || type === 'string' || type === 'boolean' || type === 'number' || Array.isArray(val) || redux_toolkit_esm_isPlainObject(val);
			}
			function findNonSerializableValue(value, path, isSerializable, getEntries, ignoredPaths) {
				if (path === void 0) {
					path = '';
				}
				if (isSerializable === void 0) {
					isSerializable = isPlain;
				}
				if (ignoredPaths === void 0) {
					ignoredPaths = [];
				}
				var foundNestedSerializable;
				if (!isSerializable(value)) {
					return {
						keyPath: path || '<root>',
						value: value,
					};
				}
				if (typeof value !== 'object' || value === null) {
					return false;
				}
				var entries = getEntries != null ? getEntries(value) : Object.entries(value);
				var hasIgnoredPaths = ignoredPaths.length > 0;
				for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {
					var _b = entries_1[_i],
						key = _b[0],
						nestedValue = _b[1];
					var nestedPath = path ? path + '.' + key : key;
					if (hasIgnoredPaths && ignoredPaths.indexOf(nestedPath) >= 0) {
						continue;
					}
					if (!isSerializable(nestedValue)) {
						return {
							keyPath: nestedPath,
							value: nestedValue,
						};
					}
					if (typeof nestedValue === 'object') {
						foundNestedSerializable = findNonSerializableValue(nestedValue, nestedPath, isSerializable, getEntries, ignoredPaths);
						if (foundNestedSerializable) {
							return foundNestedSerializable;
						}
					}
				}
				return false;
			}
			function createSerializableStateInvariantMiddleware(options) {
				if (options === void 0) {
					options = {};
				}
				if (true) {
					return function () {
						return function (next) {
							return function (action) {
								return next(action);
							};
						};
					};
				}
				var _b = options.isSerializable,
					isSerializable = _b === void 0 ? isPlain : _b,
					getEntries = options.getEntries,
					_c = options.ignoredActions,
					ignoredActions = _c === void 0 ? [] : _c,
					_d = options.ignoredActionPaths,
					ignoredActionPaths = _d === void 0 ? ['meta.arg', 'meta.baseQueryMeta'] : _d,
					_e = options.ignoredPaths,
					ignoredPaths = _e === void 0 ? [] : _e,
					_f = options.warnAfter,
					warnAfter = _f === void 0 ? 32 : _f,
					_g = options.ignoreState,
					ignoreState = _g === void 0 ? false : _g;
				return function (storeAPI) {
					return function (next) {
						return function (action) {
							if (ignoredActions.length && ignoredActions.indexOf(action.type) !== -1) {
								return next(action);
							}
							var measureUtils = getTimeMeasureUtils(warnAfter, 'SerializableStateInvariantMiddleware');
							measureUtils.measureTime(function () {
								var foundActionNonSerializableValue = findNonSerializableValue(action, '', isSerializable, getEntries, ignoredActionPaths);
								if (foundActionNonSerializableValue) {
									var keyPath = foundActionNonSerializableValue.keyPath,
										value = foundActionNonSerializableValue.value;
									console.error(
										'A non-serializable value was detected in an action, in the path: `' + keyPath + '`. Value:',
										value,
										'\nTake a look at the logic that dispatched this action: ',
										action,
										'\n(See https://redux.js.org/faq/actions#why-should-type-be-a-string-or-at-least-serializable-why-should-my-action-types-be-constants)',
										'\n(To allow non-serializable values see: https://redux-toolkit.js.org/usage/usage-guide#working-with-non-serializable-data)'
									);
								}
							});
							var result = next(action);
							if (!ignoreState) {
								measureUtils.measureTime(function () {
									var state = storeAPI.getState();
									var foundStateNonSerializableValue = findNonSerializableValue(state, '', isSerializable, getEntries, ignoredPaths);
									if (foundStateNonSerializableValue) {
										var keyPath = foundStateNonSerializableValue.keyPath,
											value = foundStateNonSerializableValue.value;
										console.error('A non-serializable value was detected in the state, in the path: `' + keyPath + '`. Value:', value, '\nTake a look at the reducer(s) handling this action type: ' + action.type + '.\n(See https://redux.js.org/faq/organizing-state#can-i-put-functions-promises-or-other-non-serializable-items-in-my-store-state)');
									}
								});
								measureUtils.warnIfExceeded();
							}
							return result;
						};
					};
				};
			}
			// src/getDefaultMiddleware.ts
			function isBoolean(x) {
				return typeof x === 'boolean';
			}
			function curryGetDefaultMiddleware() {
				return function curriedGetDefaultMiddleware(options) {
					return getDefaultMiddleware(options);
				};
			}
			function getDefaultMiddleware(options) {
				if (options === void 0) {
					options = {};
				}
				var _b = options.thunk,
					thunk = _b === void 0 ? true : _b,
					_c = options.immutableCheck,
					immutableCheck = _c === void 0 ? true : _c,
					_d = options.serializableCheck,
					serializableCheck = _d === void 0 ? true : _d;
				var middlewareArray = new MiddlewareArray();
				if (thunk) {
					if (isBoolean(thunk)) {
						middlewareArray.push(thunkMiddleware);
					} else {
						middlewareArray.push(thunkMiddleware.withExtraArgument(thunk.extraArgument));
					}
				}
				if (false) {
					var serializableOptions, immutableOptions;
				}
				return middlewareArray;
			}
			// src/configureStore.ts
			var IS_PRODUCTION = /* unused pure expression or super */ null && 'production' === 'production';
			function configureStore(options) {
				var curriedGetDefaultMiddleware = curryGetDefaultMiddleware();
				var _b = options || {},
					_c = _b.reducer,
					reducer = _c === void 0 ? void 0 : _c,
					_d = _b.middleware,
					middleware = _d === void 0 ? curriedGetDefaultMiddleware() : _d,
					_e = _b.devTools,
					devTools = _e === void 0 ? true : _e,
					_f = _b.preloadedState,
					preloadedState = _f === void 0 ? void 0 : _f,
					_g = _b.enhancers,
					enhancers = _g === void 0 ? void 0 : _g;
				var rootReducer;
				if (typeof reducer === 'function') {
					rootReducer = reducer;
				} else if (redux_toolkit_esm_isPlainObject(reducer)) {
					rootReducer = combineReducers(reducer);
				} else {
					throw new Error('"reducer" is a required argument, and must be a function or an object of functions that can be passed to combineReducers');
				}
				var finalMiddleware = middleware;
				if (typeof finalMiddleware === 'function') {
					finalMiddleware = finalMiddleware(curriedGetDefaultMiddleware);
					if (!IS_PRODUCTION && !Array.isArray(finalMiddleware)) {
						throw new Error('when using a middleware builder function, an array of middleware must be returned');
					}
				}
				if (
					!IS_PRODUCTION &&
					finalMiddleware.some(function (item) {
						return typeof item !== 'function';
					})
				) {
					throw new Error('each middleware provided to configureStore must be a function');
				}
				var middlewareEnhancer = applyMiddleware.apply(void 0, finalMiddleware);
				var finalCompose = compose2;
				if (devTools) {
					finalCompose = composeWithDevTools(
						__objSpread(
							{
								trace: !IS_PRODUCTION,
							},
							typeof devTools === 'object' && devTools
						)
					);
				}
				var storeEnhancers = [middlewareEnhancer];
				if (Array.isArray(enhancers)) {
					storeEnhancers = redux_toolkit_esm_spreadArray([middlewareEnhancer], enhancers);
				} else if (typeof enhancers === 'function') {
					storeEnhancers = enhancers(storeEnhancers);
				}
				var composedEnhancer = finalCompose.apply(void 0, storeEnhancers);
				return createStore(rootReducer, preloadedState, composedEnhancer);
			}
			// src/createAction.ts
			function createAction(type, prepareAction) {
				function actionCreator() {
					var args = [];
					for (var _i = 0; _i < arguments.length; _i++) {
						args[_i] = arguments[_i];
					}
					if (prepareAction) {
						var prepared = prepareAction.apply(void 0, args);
						if (!prepared) {
							throw new Error('prepareAction did not return an object');
						}
						return __objSpread(
							__objSpread(
								{
									type: type,
									payload: prepared.payload,
								},
								'meta' in prepared && { meta: prepared.meta }
							),
							'error' in prepared && { error: prepared.error }
						);
					}
					return { type: type, payload: args[0] };
				}
				actionCreator.toString = function () {
					return '' + type;
				};
				actionCreator.type = type;
				actionCreator.match = function (action) {
					return action.type === type;
				};
				return actionCreator;
			}
			function isFSA(action) {
				return redux_toolkit_esm_isPlainObject(action) && typeof action.type === 'string' && Object.keys(action).every(isValidKey);
			}
			function isValidKey(key) {
				return ['type', 'payload', 'error', 'meta'].indexOf(key) > -1;
			}
			function getType(actionCreator) {
				return '' + actionCreator;
			}
			// src/createReducer.ts

			// src/mapBuilders.ts
			function executeReducerBuilderCallback(builderCallback) {
				var actionsMap = {};
				var actionMatchers = [];
				var defaultCaseReducer;
				var builder = {
					addCase: function (typeOrActionCreator, reducer) {
						if (false) {
						}
						var type = typeof typeOrActionCreator === 'string' ? typeOrActionCreator : typeOrActionCreator.type;
						if (type in actionsMap) {
							throw new Error('addCase cannot be called with two reducers for the same action type');
						}
						actionsMap[type] = reducer;
						return builder;
					},
					addMatcher: function (matcher, reducer) {
						if (false) {
						}
						actionMatchers.push({ matcher: matcher, reducer: reducer });
						return builder;
					},
					addDefaultCase: function (reducer) {
						if (false) {
						}
						defaultCaseReducer = reducer;
						return builder;
					},
				};
				builderCallback(builder);
				return [actionsMap, actionMatchers, defaultCaseReducer];
			}
			// src/createReducer.ts
			function createReducer(initialState, mapOrBuilderCallback, actionMatchers, defaultCaseReducer) {
				if (actionMatchers === void 0) {
					actionMatchers = [];
				}
				N();
				var _b = typeof mapOrBuilderCallback === 'function' ? executeReducerBuilderCallback(mapOrBuilderCallback) : [mapOrBuilderCallback, actionMatchers, defaultCaseReducer],
					actionsMap = _b[0],
					finalActionMatchers = _b[1],
					finalDefaultCaseReducer = _b[2];
				var frozenInitialState = immer_esm(initialState, function () {});
				return function (state, action) {
					if (state === void 0) {
						state = frozenInitialState;
					}
					var caseReducers = redux_toolkit_esm_spreadArray(
						[actionsMap[action.type]],
						finalActionMatchers
							.filter(function (_b) {
								var matcher = _b.matcher;
								return matcher(action);
							})
							.map(function (_b) {
								var reducer = _b.reducer;
								return reducer;
							})
					);
					if (
						caseReducers.filter(function (cr) {
							return !!cr;
						}).length === 0
					) {
						caseReducers = [finalDefaultCaseReducer];
					}
					return caseReducers.reduce(function (previousState, caseReducer) {
						if (caseReducer) {
							if (r(previousState)) {
								var draft = previousState;
								var result = caseReducer(draft, action);
								if (typeof result === 'undefined') {
									return previousState;
								}
								return result;
							} else if (!t(previousState)) {
								var result = caseReducer(previousState, action);
								if (typeof result === 'undefined') {
									if (previousState === null) {
										return previousState;
									}
									throw Error('A case reducer on a non-draftable value must not return undefined');
								}
								return result;
							} else {
								return immer_esm(previousState, function (draft) {
									return caseReducer(draft, action);
								});
							}
						}
						return previousState;
					}, state);
				};
			}
			// src/createSlice.ts
			function getType2(slice, actionKey) {
				return slice + '/' + actionKey;
			}
			function createSlice(options) {
				var name = options.name,
					initialState = options.initialState;
				if (!name) {
					throw new Error('`name` is a required option for createSlice');
				}
				var reducers = options.reducers || {};
				var _b = typeof options.extraReducers === 'function' ? executeReducerBuilderCallback(options.extraReducers) : [options.extraReducers],
					_c = _b[0],
					extraReducers = _c === void 0 ? {} : _c,
					_d = _b[1],
					actionMatchers = _d === void 0 ? [] : _d,
					_e = _b[2],
					defaultCaseReducer = _e === void 0 ? void 0 : _e;
				var reducerNames = Object.keys(reducers);
				var sliceCaseReducersByName = {};
				var sliceCaseReducersByType = {};
				var actionCreators = {};
				reducerNames.forEach(function (reducerName) {
					var maybeReducerWithPrepare = reducers[reducerName];
					var type = getType2(name, reducerName);
					var caseReducer;
					var prepareCallback;
					if ('reducer' in maybeReducerWithPrepare) {
						caseReducer = maybeReducerWithPrepare.reducer;
						prepareCallback = maybeReducerWithPrepare.prepare;
					} else {
						caseReducer = maybeReducerWithPrepare;
					}
					sliceCaseReducersByName[reducerName] = caseReducer;
					sliceCaseReducersByType[type] = caseReducer;
					actionCreators[reducerName] = prepareCallback ? createAction(type, prepareCallback) : createAction(type);
				});
				var finalCaseReducers = __objSpread(__objSpread({}, extraReducers), sliceCaseReducersByType);
				var reducer = createReducer(initialState, finalCaseReducers, actionMatchers, defaultCaseReducer);
				return {
					name: name,
					reducer: reducer,
					actions: actionCreators,
					caseReducers: sliceCaseReducersByName,
				};
			}
			// src/entities/entity_state.ts
			function getInitialEntityState() {
				return {
					ids: [],
					entities: {},
				};
			}
			function createInitialStateFactory() {
				function getInitialState(additionalState) {
					if (additionalState === void 0) {
						additionalState = {};
					}
					return Object.assign(getInitialEntityState(), additionalState);
				}
				return { getInitialState: getInitialState };
			}
			// src/entities/state_selectors.ts
			function createSelectorsFactory() {
				function getSelectors(selectState) {
					var selectIds = function (state) {
						return state.ids;
					};
					var selectEntities = function (state) {
						return state.entities;
					};
					var selectAll = createDraftSafeSelector(selectIds, selectEntities, function (ids, entities) {
						return ids.map(function (id) {
							return entities[id];
						});
					});
					var selectId = function (_, id) {
						return id;
					};
					var selectById = function (entities, id) {
						return entities[id];
					};
					var selectTotal = createDraftSafeSelector(selectIds, function (ids) {
						return ids.length;
					});
					if (!selectState) {
						return {
							selectIds: selectIds,
							selectEntities: selectEntities,
							selectAll: selectAll,
							selectTotal: selectTotal,
							selectById: createDraftSafeSelector(selectEntities, selectId, selectById),
						};
					}
					var selectGlobalizedEntities = createDraftSafeSelector(selectState, selectEntities);
					return {
						selectIds: createDraftSafeSelector(selectState, selectIds),
						selectEntities: selectGlobalizedEntities,
						selectAll: createDraftSafeSelector(selectState, selectAll),
						selectTotal: createDraftSafeSelector(selectState, selectTotal),
						selectById: createDraftSafeSelector(selectGlobalizedEntities, selectId, selectById),
					};
				}
				return { getSelectors: getSelectors };
			}
			// src/entities/state_adapter.ts

			function createSingleArgumentStateOperator(mutator) {
				var operator = createStateOperator(function (_, state) {
					return mutator(state);
				});
				return function operation(state) {
					return operator(state, void 0);
				};
			}
			function createStateOperator(mutator) {
				return function operation(state, arg) {
					function isPayloadActionArgument(arg2) {
						return isFSA(arg2);
					}
					var runMutator = function (draft) {
						if (isPayloadActionArgument(arg)) {
							mutator(arg.payload, draft);
						} else {
							mutator(arg, draft);
						}
					};
					if (isDraft3(state)) {
						runMutator(state);
						return state;
					} else {
						return createNextState2(state, runMutator);
					}
				};
			}
			// src/entities/utils.ts
			function selectIdValue(entity, selectId) {
				var key = selectId(entity);
				if (false) {
				}
				return key;
			}
			function ensureEntitiesArray(entities) {
				if (!Array.isArray(entities)) {
					entities = Object.values(entities);
				}
				return entities;
			}
			function splitAddedUpdatedEntities(newEntities, selectId, state) {
				newEntities = ensureEntitiesArray(newEntities);
				var added = [];
				var updated = [];
				for (var _i = 0, newEntities_1 = newEntities; _i < newEntities_1.length; _i++) {
					var entity = newEntities_1[_i];
					var id = selectIdValue(entity, selectId);
					if (id in state.entities) {
						updated.push({ id: id, changes: entity });
					} else {
						added.push(entity);
					}
				}
				return [added, updated];
			}
			// src/entities/unsorted_state_adapter.ts
			function createUnsortedStateAdapter(selectId) {
				function addOneMutably(entity, state) {
					var key = selectIdValue(entity, selectId);
					if (key in state.entities) {
						return;
					}
					state.ids.push(key);
					state.entities[key] = entity;
				}
				function addManyMutably(newEntities, state) {
					newEntities = ensureEntitiesArray(newEntities);
					for (var _i = 0, newEntities_2 = newEntities; _i < newEntities_2.length; _i++) {
						var entity = newEntities_2[_i];
						addOneMutably(entity, state);
					}
				}
				function setOneMutably(entity, state) {
					var key = selectIdValue(entity, selectId);
					if (!(key in state.entities)) {
						state.ids.push(key);
					}
					state.entities[key] = entity;
				}
				function setManyMutably(newEntities, state) {
					newEntities = ensureEntitiesArray(newEntities);
					for (var _i = 0, newEntities_3 = newEntities; _i < newEntities_3.length; _i++) {
						var entity = newEntities_3[_i];
						setOneMutably(entity, state);
					}
				}
				function setAllMutably(newEntities, state) {
					newEntities = ensureEntitiesArray(newEntities);
					state.ids = [];
					state.entities = {};
					addManyMutably(newEntities, state);
				}
				function removeOneMutably(key, state) {
					return removeManyMutably([key], state);
				}
				function removeManyMutably(keys, state) {
					var didMutate = false;
					keys.forEach(function (key) {
						if (key in state.entities) {
							delete state.entities[key];
							didMutate = true;
						}
					});
					if (didMutate) {
						state.ids = state.ids.filter(function (id) {
							return id in state.entities;
						});
					}
				}
				function removeAllMutably(state) {
					Object.assign(state, {
						ids: [],
						entities: {},
					});
				}
				function takeNewKey(keys, update, state) {
					var original2 = state.entities[update.id];
					var updated = Object.assign({}, original2, update.changes);
					var newKey = selectIdValue(updated, selectId);
					var hasNewKey = newKey !== update.id;
					if (hasNewKey) {
						keys[update.id] = newKey;
						delete state.entities[update.id];
					}
					state.entities[newKey] = updated;
					return hasNewKey;
				}
				function updateOneMutably(update, state) {
					return updateManyMutably([update], state);
				}
				function updateManyMutably(updates, state) {
					var newKeys = {};
					var updatesPerEntity = {};
					updates.forEach(function (update) {
						if (update.id in state.entities) {
							updatesPerEntity[update.id] = {
								id: update.id,
								changes: __objSpread(__objSpread({}, updatesPerEntity[update.id] ? updatesPerEntity[update.id].changes : null), update.changes),
							};
						}
					});
					updates = Object.values(updatesPerEntity);
					var didMutateEntities = updates.length > 0;
					if (didMutateEntities) {
						var didMutateIds =
							updates.filter(function (update) {
								return takeNewKey(newKeys, update, state);
							}).length > 0;
						if (didMutateIds) {
							state.ids = state.ids.map(function (id) {
								return newKeys[id] || id;
							});
						}
					}
				}
				function upsertOneMutably(entity, state) {
					return upsertManyMutably([entity], state);
				}
				function upsertManyMutably(newEntities, state) {
					var _b = splitAddedUpdatedEntities(newEntities, selectId, state),
						added = _b[0],
						updated = _b[1];
					updateManyMutably(updated, state);
					addManyMutably(added, state);
				}
				return {
					removeAll: createSingleArgumentStateOperator(removeAllMutably),
					addOne: createStateOperator(addOneMutably),
					addMany: createStateOperator(addManyMutably),
					setOne: createStateOperator(setOneMutably),
					setMany: createStateOperator(setManyMutably),
					setAll: createStateOperator(setAllMutably),
					updateOne: createStateOperator(updateOneMutably),
					updateMany: createStateOperator(updateManyMutably),
					upsertOne: createStateOperator(upsertOneMutably),
					upsertMany: createStateOperator(upsertManyMutably),
					removeOne: createStateOperator(removeOneMutably),
					removeMany: createStateOperator(removeManyMutably),
				};
			}
			// src/entities/sorted_state_adapter.ts
			function createSortedStateAdapter(selectId, sort) {
				var _b = createUnsortedStateAdapter(selectId),
					removeOne = _b.removeOne,
					removeMany = _b.removeMany,
					removeAll = _b.removeAll;
				function addOneMutably(entity, state) {
					return addManyMutably([entity], state);
				}
				function addManyMutably(newEntities, state) {
					newEntities = ensureEntitiesArray(newEntities);
					var models = newEntities.filter(function (model) {
						return !(selectIdValue(model, selectId) in state.entities);
					});
					if (models.length !== 0) {
						merge(models, state);
					}
				}
				function setOneMutably(entity, state) {
					return setManyMutably([entity], state);
				}
				function setManyMutably(newEntities, state) {
					newEntities = ensureEntitiesArray(newEntities);
					if (newEntities.length !== 0) {
						merge(newEntities, state);
					}
				}
				function setAllMutably(newEntities, state) {
					newEntities = ensureEntitiesArray(newEntities);
					state.entities = {};
					state.ids = [];
					addManyMutably(newEntities, state);
				}
				function updateOneMutably(update, state) {
					return updateManyMutably([update], state);
				}
				function takeUpdatedModel(models, update, state) {
					if (!(update.id in state.entities)) {
						return false;
					}
					var original2 = state.entities[update.id];
					var updated = Object.assign({}, original2, update.changes);
					var newKey = selectIdValue(updated, selectId);
					delete state.entities[update.id];
					models.push(updated);
					return newKey !== update.id;
				}
				function updateManyMutably(updates, state) {
					var models = [];
					updates.forEach(function (update) {
						return takeUpdatedModel(models, update, state);
					});
					if (models.length !== 0) {
						merge(models, state);
					}
				}
				function upsertOneMutably(entity, state) {
					return upsertManyMutably([entity], state);
				}
				function upsertManyMutably(newEntities, state) {
					var _b = splitAddedUpdatedEntities(newEntities, selectId, state),
						added = _b[0],
						updated = _b[1];
					updateManyMutably(updated, state);
					addManyMutably(added, state);
				}
				function areArraysEqual(a, b) {
					if (a.length !== b.length) {
						return false;
					}
					for (var i = 0; i < a.length && i < b.length; i++) {
						if (a[i] === b[i]) {
							continue;
						}
						return false;
					}
					return true;
				}
				function merge(models, state) {
					models.forEach(function (model) {
						state.entities[selectId(model)] = model;
					});
					var allEntities = Object.values(state.entities);
					allEntities.sort(sort);
					var newSortedIds = allEntities.map(selectId);
					var ids = state.ids;
					if (!areArraysEqual(ids, newSortedIds)) {
						state.ids = newSortedIds;
					}
				}
				return {
					removeOne: removeOne,
					removeMany: removeMany,
					removeAll: removeAll,
					addOne: createStateOperator(addOneMutably),
					updateOne: createStateOperator(updateOneMutably),
					upsertOne: createStateOperator(upsertOneMutably),
					setOne: createStateOperator(setOneMutably),
					setMany: createStateOperator(setManyMutably),
					setAll: createStateOperator(setAllMutably),
					addMany: createStateOperator(addManyMutably),
					updateMany: createStateOperator(updateManyMutably),
					upsertMany: createStateOperator(upsertManyMutably),
				};
			}
			// src/entities/create_adapter.ts
			function createEntityAdapter(options) {
				if (options === void 0) {
					options = {};
				}
				var _b = __objSpread(
						{
							sortComparer: false,
							selectId: function (instance) {
								return instance.id;
							},
						},
						options
					),
					selectId = _b.selectId,
					sortComparer = _b.sortComparer;
				var stateFactory = createInitialStateFactory();
				var selectorsFactory = createSelectorsFactory();
				var stateAdapter = sortComparer ? createSortedStateAdapter(selectId, sortComparer) : createUnsortedStateAdapter(selectId);
				return __objSpread(
					__objSpread(
						__objSpread(
							{
								selectId: selectId,
								sortComparer: sortComparer,
							},
							stateFactory
						),
						selectorsFactory
					),
					stateAdapter
				);
			}
			// src/nanoid.ts
			var urlAlphabet = 'ModuleSymbhasOwnPr-0123456789ABCDEFGHNRVfgctiUvz_KqYTJkLxpZXIjQW';
			var nanoid = function (size) {
				if (size === void 0) {
					size = 21;
				}
				var id = '';
				var i = size;
				while (i--) {
					id += urlAlphabet[(Math.random() * 64) | 0];
				}
				return id;
			};
			// src/createAsyncThunk.ts
			var commonProperties = /* unused pure expression or super */ null && ['name', 'message', 'stack', 'code'];
			var RejectWithValue = /** @class */ (function () {
				function RejectWithValue(payload, meta) {
					this.payload = payload;
					this.meta = meta;
				}
				return RejectWithValue;
			})();
			var FulfillWithMeta = /** @class */ (function () {
				function FulfillWithMeta(payload, meta) {
					this.payload = payload;
					this.meta = meta;
				}
				return FulfillWithMeta;
			})();
			var miniSerializeError = function (value) {
				if (typeof value === 'object' && value !== null) {
					var simpleError = {};
					for (var _i = 0, commonProperties_1 = commonProperties; _i < commonProperties_1.length; _i++) {
						var property = commonProperties_1[_i];
						if (typeof value[property] === 'string') {
							simpleError[property] = value[property];
						}
					}
					return simpleError;
				}
				return { message: String(value) };
			};
			function createAsyncThunk(typePrefix, payloadCreator, options) {
				var fulfilled = createAction(typePrefix + '/fulfilled', function (payload, requestId, arg, meta) {
					return {
						payload: payload,
						meta: __objSpread(__objSpread({}, meta || {}), {
							arg: arg,
							requestId: requestId,
							requestStatus: 'fulfilled',
						}),
					};
				});
				var pending = createAction(typePrefix + '/pending', function (requestId, arg, meta) {
					return {
						payload: void 0,
						meta: __objSpread(__objSpread({}, meta || {}), {
							arg: arg,
							requestId: requestId,
							requestStatus: 'pending',
						}),
					};
				});
				var rejected = createAction(typePrefix + '/rejected', function (error, requestId, arg, payload, meta) {
					return {
						payload: payload,
						error: ((options && options.serializeError) || miniSerializeError)(error || 'Rejected'),
						meta: __objSpread(__objSpread({}, meta || {}), {
							arg: arg,
							requestId: requestId,
							rejectedWithValue: !!payload,
							requestStatus: 'rejected',
							aborted: (error == null ? void 0 : error.name) === 'AbortError',
							condition: (error == null ? void 0 : error.name) === 'ConditionError',
						}),
					};
				});
				var displayedWarning = false;
				var AC =
					typeof AbortController !== 'undefined'
						? AbortController
						: /** @class */ (function () {
								function class_1() {
									this.signal = {
										aborted: false,
										addEventListener: function () {},
										dispatchEvent: function () {
											return false;
										},
										onabort: function () {},
										removeEventListener: function () {},
									};
								}
								class_1.prototype.abort = function () {
									if (false) {
									}
								};
								return class_1;
						  })();
				function actionCreator(arg) {
					return function (dispatch, getState, extra) {
						var _a;
						var requestId = ((_a = options == null ? void 0 : options.idGenerator) != null ? _a : nanoid)();
						var abortController = new AC();
						var abortReason;
						var abortedPromise = new Promise(function (_, reject) {
							return abortController.signal.addEventListener('abort', function () {
								return reject({ name: 'AbortError', message: abortReason || 'Aborted' });
							});
						});
						var started = false;
						function abort(reason) {
							if (started) {
								abortReason = reason;
								abortController.abort();
							}
						}
						var promise = (function () {
							return __async(this, null, function () {
								var _a2, finalAction, err_1, skipDispatch;
								return __generator(this, function (_b) {
									switch (_b.label) {
										case 0:
											_b.trys.push([0, 2, , 3]);
											if (options && options.condition && options.condition(arg, { getState: getState, extra: extra }) === false) {
												throw {
													name: 'ConditionError',
													message: 'Aborted due to condition callback returning false.',
												};
											}
											started = true;
											dispatch(pending(requestId, arg, (_a2 = options == null ? void 0 : options.getPendingMeta) == null ? void 0 : _a2.call(options, { requestId: requestId, arg: arg }, { getState: getState, extra: extra })));
											return [
												4 /*yield*/,
												Promise.race([
													abortedPromise,
													Promise.resolve(
														payloadCreator(arg, {
															dispatch: dispatch,
															getState: getState,
															extra: extra,
															requestId: requestId,
															signal: abortController.signal,
															rejectWithValue: function (value, meta) {
																return new RejectWithValue(value, meta);
															},
															fulfillWithValue: function (value, meta) {
																return new FulfillWithMeta(value, meta);
															},
														})
													).then(function (result) {
														if (result instanceof RejectWithValue) {
															throw result;
														}
														if (result instanceof FulfillWithMeta) {
															return fulfilled(result.payload, requestId, arg, result.meta);
														}
														return fulfilled(result, requestId, arg);
													}),
												]),
											];
										case 1:
											finalAction = _b.sent();
											return [3 /*break*/, 3];
										case 2:
											err_1 = _b.sent();
											finalAction = err_1 instanceof RejectWithValue ? rejected(null, requestId, arg, err_1.payload, err_1.meta) : rejected(err_1, requestId, arg);
											return [3 /*break*/, 3];
										case 3:
											skipDispatch = options && !options.dispatchConditionRejection && rejected.match(finalAction) && finalAction.meta.condition;
											if (!skipDispatch) {
												dispatch(finalAction);
											}
											return [2 /*return*/, finalAction];
									}
								});
							});
						})();
						return Object.assign(promise, {
							abort: abort,
							requestId: requestId,
							arg: arg,
							unwrap: function () {
								return promise.then(unwrapResult);
							},
						});
					};
				}
				return Object.assign(actionCreator, {
					pending: pending,
					rejected: rejected,
					fulfilled: fulfilled,
					typePrefix: typePrefix,
				});
			}
			function unwrapResult(action) {
				if (action.meta && action.meta.rejectedWithValue) {
					throw action.payload;
				}
				if (action.error) {
					throw action.error;
				}
				return action.payload;
			}
			// src/tsHelpers.ts
			var hasMatchFunction = function (v) {
				return v && typeof v.match === 'function';
			};
			// src/matchers.ts
			var matches = function (matcher, action) {
				if (hasMatchFunction(matcher)) {
					return matcher.match(action);
				} else {
					return matcher(action);
				}
			};
			function isAnyOf() {
				var matchers = [];
				for (var _i = 0; _i < arguments.length; _i++) {
					matchers[_i] = arguments[_i];
				}
				return function (action) {
					return matchers.some(function (matcher) {
						return matches(matcher, action);
					});
				};
			}
			function isAllOf() {
				var matchers = [];
				for (var _i = 0; _i < arguments.length; _i++) {
					matchers[_i] = arguments[_i];
				}
				return function (action) {
					return matchers.every(function (matcher) {
						return matches(matcher, action);
					});
				};
			}
			function hasExpectedRequestMetadata(action, validStatus) {
				if (!action || !action.meta) return false;
				var hasValidRequestId = typeof action.meta.requestId === 'string';
				var hasValidRequestStatus = validStatus.indexOf(action.meta.requestStatus) > -1;
				return hasValidRequestId && hasValidRequestStatus;
			}
			function isAsyncThunkArray(a) {
				return typeof a[0] === 'function' && 'pending' in a[0] && 'fulfilled' in a[0] && 'rejected' in a[0];
			}
			function isPending() {
				var asyncThunks = [];
				for (var _i = 0; _i < arguments.length; _i++) {
					asyncThunks[_i] = arguments[_i];
				}
				if (asyncThunks.length === 0) {
					return function (action) {
						return hasExpectedRequestMetadata(action, ['pending']);
					};
				}
				if (!isAsyncThunkArray(asyncThunks)) {
					return isPending()(asyncThunks[0]);
				}
				return function (action) {
					var matchers = asyncThunks.map(function (asyncThunk) {
						return asyncThunk.pending;
					});
					var combinedMatcher = isAnyOf.apply(void 0, matchers);
					return combinedMatcher(action);
				};
			}
			function isRejected() {
				var asyncThunks = [];
				for (var _i = 0; _i < arguments.length; _i++) {
					asyncThunks[_i] = arguments[_i];
				}
				if (asyncThunks.length === 0) {
					return function (action) {
						return hasExpectedRequestMetadata(action, ['rejected']);
					};
				}
				if (!isAsyncThunkArray(asyncThunks)) {
					return isRejected()(asyncThunks[0]);
				}
				return function (action) {
					var matchers = asyncThunks.map(function (asyncThunk) {
						return asyncThunk.rejected;
					});
					var combinedMatcher = isAnyOf.apply(void 0, matchers);
					return combinedMatcher(action);
				};
			}
			function isRejectedWithValue() {
				var asyncThunks = [];
				for (var _i = 0; _i < arguments.length; _i++) {
					asyncThunks[_i] = arguments[_i];
				}
				var hasFlag = function (action) {
					return action && action.meta && action.meta.rejectedWithValue;
				};
				if (asyncThunks.length === 0) {
					return function (action) {
						var combinedMatcher = isAllOf(isRejected.apply(void 0, asyncThunks), hasFlag);
						return combinedMatcher(action);
					};
				}
				if (!isAsyncThunkArray(asyncThunks)) {
					return isRejectedWithValue()(asyncThunks[0]);
				}
				return function (action) {
					var combinedMatcher = isAllOf(isRejected.apply(void 0, asyncThunks), hasFlag);
					return combinedMatcher(action);
				};
			}
			function isFulfilled() {
				var asyncThunks = [];
				for (var _i = 0; _i < arguments.length; _i++) {
					asyncThunks[_i] = arguments[_i];
				}
				if (asyncThunks.length === 0) {
					return function (action) {
						return hasExpectedRequestMetadata(action, ['fulfilled']);
					};
				}
				if (!isAsyncThunkArray(asyncThunks)) {
					return isFulfilled()(asyncThunks[0]);
				}
				return function (action) {
					var matchers = asyncThunks.map(function (asyncThunk) {
						return asyncThunk.fulfilled;
					});
					var combinedMatcher = isAnyOf.apply(void 0, matchers);
					return combinedMatcher(action);
				};
			}
			function isAsyncThunkAction() {
				var asyncThunks = [];
				for (var _i = 0; _i < arguments.length; _i++) {
					asyncThunks[_i] = arguments[_i];
				}
				if (asyncThunks.length === 0) {
					return function (action) {
						return hasExpectedRequestMetadata(action, ['pending', 'fulfilled', 'rejected']);
					};
				}
				if (!isAsyncThunkArray(asyncThunks)) {
					return isAsyncThunkAction()(asyncThunks[0]);
				}
				return function (action) {
					var matchers = [];
					for (var _i = 0, asyncThunks_1 = asyncThunks; _i < asyncThunks_1.length; _i++) {
						var asyncThunk = asyncThunks_1[_i];
						matchers.push(asyncThunk.pending, asyncThunk.rejected, asyncThunk.fulfilled);
					}
					var combinedMatcher = isAnyOf.apply(void 0, matchers);
					return combinedMatcher(action);
				};
			}

			//# sourceMappingURL=module.js.map
			// EXTERNAL MODULE: ./redux/initial-state.js
			var initial_state = __webpack_require__(381); // CONCATENATED MODULE: ./redux/slice.ts // CONCATENATED MODULE: ./utils/adjectives.ts
			var adjectives = [
				'Dead',
				'Hairless',
				'Sadistic',
				'Metal',
				'Wild',
				'Domesticated',
				'Abnormal',
				'Medicated',
				'Cocky',
				'Massive',
				'Disrespectful',
				'Impressive',
				'Out of control',
				'Internet worthy',
				'Hilarious',
				'Sexy',
				'Hot',
				'Very tactful',
				'Bearded',
				'Duck-like',
				'Violent',
				'Slimy',
				'Creepy',
				'Embarrassed',
				'Self-centered',
				'Talking',
				'Naked',
				'Angry',
				'Shaky',
				'Deep',
				'Sick',
				'Dead',
				'Zippy',
				'Harsh',
				'Sticky',
				'Fluffy',
				'Frozen',
				'Rotten',
				'Unholy',
				'Filthy',
				'Bonkers',
				'Frisky',
				'Greedy',
				'Crawly',
				'Cursed',
				'Insane',
				'Broken',
				'Hideous',
				'Ungodly',
				'Abusive',
				'Drunken',
				'Hateful',
				'Demonic',
				'Idiotic',
				'Twisted',
				'Useless',
				'Yapping',
				'Magical',
				'Indecent',
				'Godawful',
				'Arrogant',
				'Demented',
				'Fighting',
				'Confused',
				'Flirting',
				'High-end',
				'Insecure',
				'Maniacal',
				'Sickened',
				'Slippery',
				'Stubborn',
				'Tripping',
				'Vengeful',
				'Sinister',
				'Costumed',
				'Cowardly',
				'Haunting',
				'Startled',
				'Alcoholic',
				'Mummified',
				'Demanding',
				'Shivering',
				'Offensive',
				'Nighttime',
				'Depressed',
				'Tasteless',
				'Startling',
				'Disgusting',
				'Slap happy',
				'Disturbing',
				'Adulterous',
				'Blathering',
				'Flickering',
				'Rebellious',
				'Impertinent',
				'Bull headed',
				'Hyperactive',
				'Pretentious',
				'Infuriating',
				'Outnumbered',
				'Pea-brained',
				'Territorial',
				'Underhanded',
				'Zombie like',
				'Mischievous',
				'At-the-ready',
				'Free-loading',
				'House-broken',
				'Up-to-no-good',
				'Cruel-hearted',
				'Misunderstood',
				'Narrow-minded',
				'Self-absorbed',
				'Bat-shit-crazy',
				'Fiercely-loyal',
				'Out-of-control',
				'Fear-inspiring',
				'Bat shit crazy',
				'Painfully honest',
				'Mentally impaired',
			];
			/* harmony default export */ const utils_adjectives = adjectives[Math.floor(Math.random() * adjectives.length)]; // CONCATENATED MODULE: ./utils/animals.ts

			var animals = [
				'Dog',
				'Puppy',
				'Turtle',
				'Rabbit',
				'Parrot',
				'Cat',
				'Kitten',
				'Goldfish',
				'Mouse',
				'Tropical Fish',
				'Hamster',
				'Cow',
				'Duck',
				'Shrimp',
				'Pig',
				'Goat',
				'Crab',
				'Deer',
				'Bee',
				'Sheep',
				'Fish',
				'Turkey',
				'Dove',
				'Chicken',
				'Horse',
				'Crow',
				'Peacock',
				'Sparrow',
				'Goose',
				'Stork',
				'Pigeon',
				'Hawk',
				'Bald Eagle',
				'Raven',
				'Flamingo',
				'Seagull',
				'Ostrich',
				'Swallow',
				'Black Bird',
				'Penguin',
				'Robin',
				'Swan',
				'Owl',
				'Woodpecker',
				'Squirrel',
				'Chimpanzee',
				'Ox',
				'Lion',
				'Panda',
				'Walrus',
				'Otter',
				'Kangaroo',
				'Monkey',
				'Koala',
				'Mole',
				'Elephant',
				'Leopard',
				'Hippopotamus',
				'Giraffe',
				'Fox',
				'Coyote',
				'Hedgehong',
				'Camel',
				'Starfish',
				'Alligator',
				'Tiger',
				'Bear',
				'Blue Whale',
				'Raccoon',
				'Arctic Wolf',
				'Crocodile',
				'Dolphin',
				'Snake',
				'Elk',
				'Gorilla',
				'Bat',
				'Hare',
				'Toad',
				'Frog',
				'Rat',
				'Badger',
				'Lizard',
				'Hedgehog',
				'Reindeer',
				'Seal',
				'Octopus',
				'Shark',
				'Seahorse',
				'Whale',
				'Jellyfish',
				'Squid',
				'Lobster',
				'Pelican',
				'Clam',
				'Sea Urchin',
				'Cormorant',
				'Sea Anemone',
				'Sea Turtle',
				'Sea Lion',
				'Coral',
				'Moth',
				'Butterfly',
				'Spider',
				'Ladybird',
				'Ant',
				'Dragonfly',
				'Fly',
				'Mosquito',
				'Grasshopper',
				'Beetle',
				'Cockroach',
				'Centipede',
				'Worm',
				'Louse',
			];
			/* harmony default export */ const utils_animals = animals[Math.floor(Math.random() * animals.length)]; // CONCATENATED MODULE: ./components/settings.ts

			var id = generateID();
			console.log(utils_adjectives + ' ' + utils_animals, id);
			var devicePixelRatio = typeof window === 'undefined' ? 1 : window.devicePixelRatio;
			var Settings = {
				user_id: id,
				user_name: utils_adjectives + ' ' + utils_animals,
				user_color: pastelColor(),
				line_width: 1 * devicePixelRatio,
				box_size: 4 * devicePixelRatio,
				// highlight: '#1a83ee',
				highlight: '#449ef2',
				max_zoom: 500,
				min_zoom: 0.0001,
				pan_sensitivity: 1.5,
				zoom_sensitivity: 0.01,
				grid_enabled: true,
				grid_step: 1,
				grid_line_width: 2,
				grid_min_scale: 5,
			};
			/* harmony default export */ const settings = Settings; // CONCATENATED MODULE: ./reducers/modifications/interactions.ts

			var interactions = {
				resize: function (state, props) {
					var _a = props.payload,
						position = _a.position,
						last_position = _a.last_position,
						selected_ids = _a.selected_ids;
					if (selected_ids.length === 1) {
						selected(state.elements, selected_ids).forEach(function (element) {
							return elements_elements[element.type].resize(element, position, last_position);
						});
					} else {
						group.resize({ elements: selected(state.elements, selected_ids), type: 'group', rotation: 0 }, position, last_position);
					}
				},
				rotate: function (state, props) {
					var _a = props.payload,
						position = _a.position,
						last_position = _a.last_position,
						selected_ids = _a.selected_ids;
					if (selected_ids.length === 1) {
						selected(state.elements, selected_ids).forEach(function (element) {
							return elements_elements[element.type].rotate(element, position, last_position);
						});
					} else {
						group.rotate({ elements: selected(state.elements, selected_ids), type: 'group', rotation: 0 }, position, last_position);
					}
				},
				stretch: function (state, props) {
					var _a = props.payload,
						position = _a.position,
						last_position = _a.last_position,
						selected_ids = _a.selected_ids;
					selected(state.elements, selected_ids).forEach(function (element) {
						return elements_elements[element.type].stretch(element, position, last_position);
					});
				},
				move: function (state, props) {
					var _a = props.payload,
						position = _a.position,
						last_position = _a.last_position,
						selected_ids = _a.selected_ids;
					selected(state.elements, selected_ids).forEach(function (element) {
						return elements_elements[element.type].move(element, position, last_position);
					});
				},
				edit: function (state, props) {
					var _a = props.payload,
						position = _a.position,
						last_position = _a.last_position,
						selected_ids = _a.selected_ids,
						point = _a.point;
					selected(state.elements, selected_ids).forEach(function (element) {
						return elements_elements[element.type].edit(element, position, last_position, point);
					});
				},
				createElements: function (state, props) {
					slice.caseReducers.unselectAll(state);
					state.elements = props.payload.elements.concat(state.elements);
				},
				createElement: function (state, props) {
					var _a = props.payload,
						user_id = _a.user_id,
						id = _a.id,
						type = _a.type,
						position = _a.position;
					slice.caseReducers.unselectAll(state);
					// console.log(props.payload); // Sync error created here from bad payload
					var selected = settings.user_id === user_id;
					state.elements.unshift(elements_elements[type].create(id, position, selected));
					var props_clone = clone(props);
					props_clone.payload = { user_id: user_id, mode: 'edit' };
					slice.caseReducers.cursor(state, props_clone);
				},
				toggleVisible: function (state, props) {
					var id = props.payload.id;
					var element = flatten(state.elements).find(function (element) {
						return element.id === id;
					});
					if (element) {
						element.visible = !element.visible;
						element.selected = element.visible;
					}
				},
				toggleLocked: function (state, props) {
					var id = props.payload.id;
					var element = flatten(state.elements).find(function (element) {
						return element.id === id;
					});
					if (element) {
						element.locked = !element.locked;
						element.selected = !element.locked;
					}
				},
				group: function (state, props) {
					var _a = props.payload,
						id = _a.id,
						selected_ids = _a.selected_ids;
					var location_id = selected_ids[0];
					slice.caseReducers.unselectAll(state);
					forEachElement(state.elements, function (element, i, elements) {
						if (element.id === location_id)
							elements[i] = {
								id: id,
								label: 'Group',
								type: 'group',
								selected: true,
								hover: false,
								rotation: 0,
								visible: true,
								locked: false,
								elements: selected(state.elements, selected_ids),
							};
					});
					// Remove selected elements, aside from in new group
					forEachElementUntil(
						state.elements,
						function (element, i, elements) {
							if (selected_ids.includes(element.id)) elements.splice(i, 1);
						},
						id
					);
				},
			};
			/* harmony default export */ const modifications_interactions = interactions;
			var interaction_actions = Object.keys(interactions);
			// Stops recursing at given id
			function forEachElementUntil(elements, callback, stop_id) {
				elements.forEach(function (element, index, array) {
					callback(element, index, array);
					if (element.type === 'group' && element.id !== stop_id) {
						forEachElementUntil(element.elements, callback, stop_id);
					}
				});
			} // CONCATENATED MODULE: ./reducers/modifications/properties.ts

			var properties_read =
				(undefined && undefined.__read) ||
				function (o, n) {
					var m = typeof Symbol === 'function' && o[Symbol.iterator];
					if (!m) return o;
					var i = m.call(o),
						r,
						ar = [],
						e;
					try {
						while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
					} catch (error) {
						e = { error: error };
					} finally {
						try {
							if (r && !r.done && (m = i['return'])) m.call(i);
						} finally {
							if (e) throw e.error;
						}
					}
					return ar;
				};

			var properties = {
				addFill: function (state, props) {
					var selected_ids = props.payload.selected_ids;
					selected(state.elements, selected_ids).forEach(function (element) {
						element.fill.push(props.payload.props);
					});
				},
				setFill: function (state, props) {
					var selected_ids = props.payload.selected_ids;
					selected(state.elements, selected_ids).forEach(function (element) {
						elements_elements[element.type].setFill(element, props.payload.props);
					});
				},
				removeFill: function (state, props) {
					var id = props.payload.id;
					flatten(state.elements)
						.filter(function (element) {
							return element.type !== 'group';
						})
						.forEach(function (element) {
							element.fill = element.fill.filter(function (fill) {
								return fill.id !== id;
							});
						});
				},
				addStroke: function (state, props) {
					var selected_ids = props.payload.selected_ids;
					selected(state.elements, selected_ids).forEach(function (element) {
						element.stroke.push(props.payload.props);
					});
				},
				setStroke: function (state, props) {
					var selected_ids = props.payload.selected_ids;
					selected(state.elements, selected_ids).forEach(function (element) {
						elements_elements[element.type].setStroke(element, props.payload.props);
					});
				},
				removeStroke: function (state, props) {
					var id = props.payload.id;
					flatten(state.elements)
						.filter(function (element) {
							return element.type !== 'group';
						})
						.forEach(function (element) {
							element.stroke = element.stroke.filter(function (stroke) {
								return stroke.id !== id;
							});
						});
				},
				addEffect: function (state, props) {
					var selected_ids = props.payload.selected_ids;
					selected(state.elements, selected_ids).forEach(function (element) {
						element.effect.push(props.payload.props);
					});
				},
				setEffect: function (state, props) {
					var selected_ids = props.payload.selected_ids;
					selected(state.elements, selected_ids).forEach(function (element) {
						elements_elements[element.type].setEffect(element, props.payload.props);
					});
				},
				removeEffect: function (state, props) {
					var id = props.payload.id;
					flatten(state.elements)
						.filter(function (element) {
							return element.type !== 'group';
						})
						.forEach(function (element) {
							element.effect = element.effect.filter(function (effect) {
								return effect.id !== id;
							});
						});
				},
				property: function (state, props) {
					var selected_ids = props.payload.selected_ids;
					var entry = Object.entries(props.payload.props);
					selected(state.elements, selected_ids).forEach(function (element) {
						entry.forEach(function (_a) {
							var _b = properties_read(_a, 2),
								key = _b[0],
								value = _b[1];
							if (key === 'x' || key === 'y') {
								var bound = elements_elements[element.type].bound(element);
								var delta_1 = Number(value) - bound[key];
								elements_elements[element.type].getPoints(element).forEach(function (point) {
									point[key] += delta_1;
									point.controls.forEach(function (control) {
										control[key] += delta_1;
									});
								});
							} else if (key === 'radius') {
								elements_elements[element.type].getPoints(element).forEach(function (point) {
									return (point[key] = value);
								});
							} else if (key === 'rotation') {
								var center_1 = elements_elements[element.type].center(element);
								var delta_2 = Number(value) - element.rotation;
								element.rotation = Number(value);
								elements_elements[element.type].getPoints(element).forEach(function (point) {
									var rotated = rotatePoint(point, center_1, delta_2);
									point.x = rotated.x;
									point.y = rotated.y;
									point.controls.forEach(function (control) {
										var rotated = rotatePoint(control, center_1, delta_2);
										control.x = rotated.x;
										control.y = rotated.y;
									});
								});
							} else if (key === 'width' || key === 'height') {
								var bound_1 = elements_elements[element.type].bound(element);
								var center_2 = elements_elements[element.type].center(element);
								var ratio_1 = Number(value) / bound_1[key];
								var axis_1 = key === 'width' ? 'x' : 'y';
								elements_elements[element.type].getPoints(element).forEach(function (point) {
									var rotated = rotatePoint(point, center_2, -element.rotation);
									point.x = rotated.x;
									point.y = rotated.y;
									point.controls.forEach(function (control) {
										var rotated = rotatePoint(control, center_2, -element.rotation);
										control.x = rotated.x;
										control.y = rotated.y;
									});
									point[axis_1] = (point[axis_1] - bound_1[axis_1]) * ratio_1 + bound_1[axis_1];
									point.controls.forEach(function (control) {
										control[axis_1] = (control[axis_1] - bound_1[axis_1]) * ratio_1 + bound_1[axis_1];
									});
									var un_rotated = rotatePoint(point, center_2, element.rotation);
									point.x = un_rotated.x;
									point.y = un_rotated.y;
									point.controls.forEach(function (control) {
										var rotated = rotatePoint(control, center_2, element.rotation);
										control.x = rotated.x;
										control.y = rotated.y;
									});
								});
							} else {
								element[key] = value;
							}
						});
					});
				},
				delete: function (state, props) {
					var selected_ids = props.payload.selected_ids;
					forEachElement(state.elements, function (element, i, elements) {
						if (selected_ids.includes(element.id)) elements.splice(i, 1);
					});
				},
				setBackground: function (state, props) {
					state.page = props.payload;
				},
			};
			/* harmony default export */ const modifications_properties = properties; // CONCATENATED MODULE: ./reducers/modifications/modifications.ts

			var modifications_assign =
				(undefined && undefined.__assign) ||
				function () {
					modifications_assign =
						Object.assign ||
						function (t) {
							for (var s, i = 1, n = arguments.length; i < n; i++) {
								s = arguments[i];
								for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
							}
							return t;
						};
					return modifications_assign.apply(this, arguments);
				};

			// Modification types can be undone / redone
			var modifications = modifications_assign(modifications_assign({}, modifications_interactions), modifications_properties);
			/* harmony default export */ const modifications_modifications = modifications;
			var modification_actions = Object.keys(modifications); // CONCATENATED MODULE: ./reducers/tools.ts

			var tools = {
				hoverOnly: function (state, props) {
					flatten(state.elements).forEach(function (element) {
						return (element.hover = element.id === props.payload.id);
					});
				},
				select: function (state, props) {
					var element = flatten(state.elements).find(function (element) {
						return element.id === props.payload.id;
					});
					if (element) element.selected = true;
				},
				selectOnly: function (state, props) {
					flatten(state.elements).forEach(function (element) {
						return (element.selected = props.payload.select.includes(element.id));
					});
				},
				unselect: function (state, props) {
					var element = flatten(state.elements).find(function (element) {
						return element.id === props.payload.id;
					});
					if (element) {
						element.selected = false;
						element.editing = false;
					}
				},
				selectAll: function (state) {
					flatten(state.elements).forEach(function (element) {
						return (element.selected = true);
					});
				},
				unselectAll: function (state) {
					flatten(state.elements).forEach(function (element) {
						element.selected = false;
						element.editing = false;
					});
				},
				editOnly: function (state, props) {
					var element = flatten(state.elements).find(function (element) {
						return element.id === props.payload.id;
					});
					if (element) element.editing = true;
				},
			};
			/* harmony default export */ const reducers_tools = tools;
			var tool_actions = Object.keys(tools); // CONCATENATED MODULE: ./reducers/user.ts

			var user_read =
				(undefined && undefined.__read) ||
				function (o, n) {
					var m = typeof Symbol === 'function' && o[Symbol.iterator];
					if (!m) return o;
					var i = m.call(o),
						r,
						ar = [],
						e;
					try {
						while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
					} catch (error) {
						e = { error: error };
					} finally {
						try {
							if (r && !r.done && (m = i['return'])) m.call(i);
						} finally {
							if (e) throw e.error;
						}
					}
					return ar;
				};
			/* harmony default export */ const user = {
				addUser: function (state, props) {
					var _a = props.payload,
						user_id = _a.user_id,
						label = _a.label,
						color = _a.color;
					state.views.push({ id: user_id, label: label, x: 1000, y: 1000, scale: 5 });
					state.cursors.push({ id: user_id, label: label, color: color, x: 0, y: 0, rotation: 0, type: 'select', mode: 'edit', visible: false, pressed: false });
				},
				centerView: function (state, props) {
					var _a = props.payload,
						user_id = _a.user_id,
						x = _a.x,
						y = _a.y;
					var view = state.views.find(function (view) {
						return user_id === view.id;
					});
					if (!view) return; // Not great
					view.x = x;
					view.y = y;
					view.centered = true;
				},
				removeUser: function (state, props) {
					var user_id = props.payload.user_id;
					state.views = state.views.filter(function (view) {
						return view.id !== user_id;
					});
					state.cursors = state.cursors.filter(function (view) {
						return view.id !== user_id;
					});
				},
				view: function (state, props) {
					var _a = props.payload,
						user_id = _a.user_id,
						delta_x = _a.delta_x,
						delta_y = _a.delta_y,
						delta_scale = _a.delta_scale,
						cursor_x = _a.cursor_x,
						cursor_y = _a.cursor_y;
					var view = state.views.find(function (view) {
						return user_id === view.id;
					});
					if (!view) return; // Not great
					if (delta_x) view.x += delta_x;
					if (delta_y) view.y += delta_y;
					if (delta_scale) view.scale += delta_scale;
					var cursor = state.cursors.find(function (cursor) {
						return user_id === cursor.id;
					});
					if (cursor_x) cursor.x = cursor_x;
					if (cursor_y) cursor.y = cursor_y;
				},
				cursor: function (state, props) {
					var user_id = props.payload.user_id;
					var cursor = state.cursors.find(function (cursor) {
						return user_id === cursor.id;
					});
					if (!cursor) return; // Not great
					// if (x) cursor.x = x;
					// if (y) cursor.y = y;
					// if (rotation) cursor.rotation = rotation;
					// if (type) cursor.type = type;
					// if (mode) cursor.mode = mode;
					// if (visible) cursor.visible = visible;
					cursor.id = user_id;
					Object.entries(props.payload).forEach(function (_a) {
						var _b = user_read(_a, 2),
							key = _b[0],
							value = _b[1];
						if (value !== undefined) cursor[key] = value;
					});
				},
			}; // CONCATENATED MODULE: ./reducers/reducers.ts

			var reducers_assign =
				(undefined && undefined.__assign) ||
				function () {
					reducers_assign =
						Object.assign ||
						function (t) {
							for (var s, i = 1, n = arguments.length; i < n; i++) {
								s = arguments[i];
								for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
							}
							return t;
						};
					return reducers_assign.apply(this, arguments);
				};

			var reducers = reducers_assign(reducers_assign(reducers_assign(reducers_assign({}, reducers_creation), modifications_modifications), reducers_tools), user);
			/* harmony default export */ const reducers_reducers = reducers;
		})();

		/******/ return __webpack_exports__;
		/******/
	})();
});
